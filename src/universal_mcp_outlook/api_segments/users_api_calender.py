from typing import Any, List, Optional
from .api_segment_base import APISegmentBase


class UsersApiCalender(APISegmentBase):

    def __init__(self, main_app_client: Any):
        super().__init__(main_app_client)

    def user_get_calendar(
        self,
        user_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a user's calendar details by their ID, allowing optional filtering and expansion of specific fields.

        Args:
            user_id (string): user-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_update_calendar(
        self,
        user_id: str,
        id: Optional[str] = None,
        allowedOnlineMeetingProviders: Optional[List[str]] = None,
        canEdit: Optional[bool] = None,
        canShare: Optional[bool] = None,
        canViewPrivateItems: Optional[bool] = None,
        changeKey: Optional[str] = None,
        color: Optional[str] = None,
        defaultOnlineMeetingProvider: Optional[str] = None,
        hexColor: Optional[str] = None,
        isDefaultCalendar: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        isTallyingResponses: Optional[bool] = None,
        name: Optional[str] = None,
        owner: Optional[dict[str, dict[str, Any]]] = None,
        calendarPermissions: Optional[List[Any]] = None,
        calendarView: Optional[List[Any]] = None,
        events: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates a user's calendar settings using the PATCH method, applying partial modifications to the specified user's calendar resource identified by the `{user-id}` path parameter.

        Args:
            user_id (string): user-id
            id (string): The unique identifier for an entity. Read-only.
            allowedOnlineMeetingProviders (array): Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
            canEdit (boolean): true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
            canShare (boolean): true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
            canViewPrivateItems (boolean): If true, the user can read calendar items that have been marked private, false otherwise.
            changeKey (string): Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            color (string): color
            defaultOnlineMeetingProvider (string): defaultOnlineMeetingProvider
            hexColor (string): The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
            isDefaultCalendar (boolean): true if this is the default calendar where new events are created by default, false otherwise.
            isRemovable (boolean): Indicates whether this user calendar can be deleted from the user mailbox.
            isTallyingResponses (boolean): Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
            name (string): The calendar name.
            owner (object): owner
            calendarPermissions (array): The permissions of the users with whom the calendar is shared.
            calendarView (array): The calendar view for the calendar. Navigation property. Read-only.
            events (array): The events in the calendar. Navigation property. Read-only.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the calendar. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedOnlineMeetingProviders": allowedOnlineMeetingProviders,
            "canEdit": canEdit,
            "canShare": canShare,
            "canViewPrivateItems": canViewPrivateItems,
            "changeKey": changeKey,
            "color": color,
            "defaultOnlineMeetingProvider": defaultOnlineMeetingProvider,
            "hexColor": hexColor,
            "isDefaultCalendar": isDefaultCalendar,
            "isRemovable": isRemovable,
            "isTallyingResponses": isTallyingResponses,
            "name": name,
            "owner": owner,
            "calendarPermissions": calendarPermissions,
            "calendarView": calendarView,
            "events": events,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_list_calendar_permission(
        self,
        user_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of calendar permissions for a specified user with support for query parameters including filtering, sorting, and pagination.

        Args:
            user_id (string): user-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarPermissions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_create_calendar_permission(
        self,
        user_id: str,
        id: Optional[str] = None,
        allowedRoles: Optional[List[str]] = None,
        emailAddress: Optional[dict[str, dict[str, Any]]] = None,
        isInsideOrganization: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        role: Optional[str] = None,
    ) -> Any:
        """

        Assigns or modifies calendar permissions for a specified user using a JSON payload.

        Args:
            user_id (string): user-id
            id (string): The unique identifier for an entity. Read-only.
            allowedRoles (array): List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
            emailAddress (object): emailAddress
            isInsideOrganization (boolean): True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
            isRemovable (boolean): True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
            role (string): role

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedRoles": allowedRoles,
            "emailAddress": emailAddress,
            "isInsideOrganization": isInsideOrganization,
            "isRemovable": isRemovable,
            "role": role,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarPermissions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_get_calendar_permission(
        self,
        user_id: str,
        calendarPermission_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific calendar permission details for a user based on the provided user ID and calendar permission ID, allowing optional filtering and expansion of results.

        Args:
            user_id (string): user-id
            calendarPermission_id (string): calendarPermission-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarPermissions/{calendarPermission_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_update_calendar_permission(
        self,
        user_id: str,
        calendarPermission_id: str,
        id: Optional[str] = None,
        allowedRoles: Optional[List[str]] = None,
        emailAddress: Optional[dict[str, dict[str, Any]]] = None,
        isInsideOrganization: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        role: Optional[str] = None,
    ) -> Any:
        """

        Updates a specific calendar permission for a user using JSON Patch operations.

        Args:
            user_id (string): user-id
            calendarPermission_id (string): calendarPermission-id
            id (string): The unique identifier for an entity. Read-only.
            allowedRoles (array): List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
            emailAddress (object): emailAddress
            isInsideOrganization (boolean): True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
            isRemovable (boolean): True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
            role (string): role

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedRoles": allowedRoles,
            "emailAddress": emailAddress,
            "isInsideOrganization": isInsideOrganization,
            "isRemovable": isRemovable,
            "role": role,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarPermissions/{calendarPermission_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_delete_calendar_permission(
        self, user_id: str, calendarPermission_id: str
    ) -> Any:
        """

        Deletes a specific calendar permission for a user using the provided IDs and returns a status message, potentially requiring an "If-Match" header for conditional deletion.

        Args:
            user_id (string): user-id
            calendarPermission_id (string): calendarPermission-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarPermissions/{calendarPermission_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_permission_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves the count of calendar permissions for a specified user using their user ID.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarPermissions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_list_calendar_view(
        self,
        user_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a calendar view for a specified user, allowing for filtering and sorting of events within a specified time range.

        Args:
            user_id (string): user-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_get_calendar_view(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific instances of an event from a user's calendar view using the Microsoft Graph API, based on a specified event ID and time range defined by start and end dates.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_list_attachment(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific event in a user's calendar view, allowing for optional filtering and sorting of results.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_create_attachment(
        self,
        user_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event in a user's calendar view using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_attachment(
        self,
        user_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific attachment associated with an event in a user's calendar view, allowing optional filtering and expansion of response data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_delete_attachment(
        self, user_id: str, event_id: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment from a specific event in a user's calendar view using the provided attachment ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments associated with a specific calendar event for a given user, allowing for optional filtering and searching.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload ranges of a file as an attachment to a specified calendar event, allowing for the upload of large files.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_calendar(
        self,
        user_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific calendar event for a user, allowing optional filtering and expansion of the event details.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_list_extension(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves extensions for a specific event in a user's calendar view using the "GET" method, allowing for optional filtering and sorting.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_create_extension(
        self, user_id: str, event_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds custom extensions to a specific calendar event identified by the user ID and event ID using a POST request with a JSON body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_extension(
        self,
        user_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves the specified extension for a calendar event associated with a user, allowing optional selection and expansion of specific properties via query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_update_extension(
        self, user_id: str, event_id: str, extension_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Updates an existing calendar event extension for a specified user using JSON Patch operations.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_delete_extension(
        self, user_id: str, event_id: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension from a specific event in a user's calendar view using the "DELETE" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves a count of event extensions for a specific event in a user's calendar view, allowing for filtering and searching of event data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_list_instance(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves specific instances of a calendar event for a user, filtered by a time range and optionally sorted, selected, or expanded based on additional query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_get_instance(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves instances of a recurring event within a specified time range for a user's calendar, allowing optional selection and expansion of event properties.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_list_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachments for a specific event instance within a user's calendar view, allowing for optional filtering, sorting, and expansion of results.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_create_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event instance in a user's calendar view using the provided JSON payload.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment from an event instance in a calendar view for a given user, allowing for optional selection and expansion of specific data fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_delete_attachment(
        self, user_id: str, event_id: str, event_id1: str, attachment_id: str
    ) -> Any:
        """

        Deletes a specific attachment from an event instance in a calendar view for a given user using the provided attachment ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event instance within a user's calendar using the GET method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload ranges of a file as an attachment to a specific event instance in a user's calendar, allowing for large file uploads.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_calendar(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed instances of a specific recurring event from a user's calendar view using the "GET" method, allowing for optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_list_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves all extensions associated with a specific recurring calendar event instance for a given user, allowing optional filtering, sorting, and pagination.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_create_extension(
        self, user_id: str, event_id: str, event_id1: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds custom extensions to a specific event instance in a user's calendar view using JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed information about a specific event instance extension for a user's calendar, supporting optional filtering and expansion of returned data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_update_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates specific details of an event instance extension in a user's calendar view using the PATCH method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_delete_extension(
        self, user_id: str, event_id: str, event_id1: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension identified by the `extension-id` from a specific event instance in a user's calendar view.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extensions for a specific event instance in a user's calendar view, using the provided user ID and event IDs.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific event instance in a user's calendar view using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_cancel(
        self, user_id: str, event_id: str, event_id1: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specific instance of a recurring event in a user's calendar using the Microsoft Graph API, allowing the organizer to send a cancellation message to attendees.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_decline(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation in a user's calendar view using the Microsoft Graph API, allowing the specification of a new time proposal if the event allows it.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_dismiss_reminder(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specific event instance in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_forward(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific instance of a calendar event to new recipients using the Microsoft Graph API, allowing organizers or attendees to share meeting requests with additional users.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_permanent_delete(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Permanently deletes an event instance from a user's calendar view and places it in the Purges folder, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specific event instance in a user's calendar to a new time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event instance in a user's calendar, allowing the option to propose an alternative meeting time if the event supports new time proposals.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves a specified number of instances of a recurring event from a user's calendar, using the provided user ID and event ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_delta(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to instances of a recurring event in a user's calendar view, allowing applications to track newly created, updated, or deleted event instances within a specified date range.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_accept(
        self,
        user_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event in a user's calendar using the Microsoft Graph API by sending a POST request with the user ID and event ID, requiring a JSON body with acceptance details.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_cancel(
        self, user_id: str, event_id: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specified event in a user's calendar and sends a cancellation message to attendees using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_decline(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation for a specified user using the Microsoft Graph API, allowing the option to propose a new time if supported by the event.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_dismiss_reminder(
        self, user_id: str, event_id: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specified event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_forward(
        self,
        user_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific calendar event identified by `{event-id}` for a user with `{user-id}` using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_permanent_delete(
        self, user_id: str, event_id: str
    ) -> Any:
        """

        Permanently deletes an event from a user's calendar and places it in the Purges folder in the user's mailbox using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a reminder for the specified calendar event by rescheduling it to a new date and time provided in the request body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event in a specified user's calendar, allowing for optional comments and proposed new times.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves the count of calendar events for a specified user using the provided search and filter parameters.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_delta(
        self,
        user_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to events in a specified calendar view for a user, allowing synchronization of local event stores by fetching added, updated, or deleted events between the specified start and end dates.

        Args:
            user_id (string): user-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/calendarView/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_list_event(
        self,
        user_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of calendar events for a specified user, allowing for optional filtering, sorting, and data expansion.

        Args:
            user_id (string): user-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_create_event(
        self,
        user_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Creates a new calendar event for a specific user using the provided JSON data and returns a relevant status message.

        Args:
            user_id (string): user-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_get_event(
        self,
        user_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific calendar event for a user by user ID and event ID, allowing optional filtering and expansion of returned data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_update_event(
        self,
        user_id: str,
        event_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates an existing calendar event specified by the event ID for a given user ID using partial modifications defined in the JSON body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_delete_event(self, user_id: str, event_id: str) -> Any:
        """

        Deletes a calendar event identified by the specified event ID for a user with the given user ID, using the "DELETE" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_list_attachment(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific event in a user's calendar, allowing for optional filtering, sorting, and selection of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_create_attachment(
        self,
        user_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Uploads an attachment to a specific event in a user's calendar and returns a response indicating success or failure.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_attachment(
        self,
        user_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment from an event in a user's calendar, allowing optional selection and expansion of properties using query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_delete_attachment(
        self, user_id: str, event_id: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment from a specific event in a user's calendar using the provided user ID, event ID, and attachment ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the total count of attachments for a specific event in a user's calendar.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload ranges of a file as an attachment to a specified calendar event for a user.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_calendar(
        self,
        user_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific calendar event by its ID for a given user, with optional filtering and expansion of event details.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_list_extension(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves event extensions for a specific event in a user's calendar, allowing for optional filtering, sorting, and expansion of the response.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_create_extension(
        self, user_id: str, event_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds an extension to a specific calendar event for a user using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_extension(
        self,
        user_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific extension for a given event in the calendar of a specified user, optionally allowing selective property retrieval or expansion.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_update_extension(
        self, user_id: str, event_id: str, extension_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Updates a specific calendar event extension for a user using the PATCH method, modifying its properties as specified in the JSON request body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_delete_extension(
        self, user_id: str, event_id: str, extension_id: str
    ) -> Any:
        """

        Deletes a specific calendar event extension by its ID for a user, using the provided user ID, event ID, and extension ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extensions for a specific calendar event associated with a user using the GET method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_list_instance(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves and lists event instances for a specified event in a user's calendar, allowing filtering by start and end date, and optionally sorting, selecting, and expanding related data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_get_instance(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific instances of a calendar event for a user, filtered by start and end date, with optional selection and expansion of event details.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_list_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachments for a specific event instance within a user's calendar, allowing for filtering and sorting through query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_create_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event instance within a user's calendar using a JSON body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment from a recurring event instance associated with a user's calendar event using the provided identifiers, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_delete_attachment(
        self, user_id: str, event_id: str, event_id1: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment from a specific event instance in a user's calendar using the provided identifiers and returns a status message.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Returns the count of attachments for a specific event instance in a user's calendar.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session for attaching a file to a specific calendar event instance in Microsoft Graph, allowing iterative upload of file content.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_calendar(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific calendar event instances for a user using the "GET" method, allowing for optional selection and expansion of properties through query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_list_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves event instance extensions for a specific recurring event associated with a user, allowing for filtering, sorting, and selecting specific data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_create_extension(
        self, user_id: str, event_id: str, event_id1: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds a custom extension to a specific event instance in a user's calendar using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific extension details for a calendar event instance belonging to a user, allowing optional selection and expansion of fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_update_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates a specific extension of a recurring event instance in a user's calendar using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_delete_extension(
        self, user_id: str, event_id: str, event_id1: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension from a specific calendar event instance using the provided user ID, event IDs, and extension ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of event instances for a specific calendar event using the "GET" method, allowing for filtering and searching based on provided parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific instance of an event in a user's calendar using the Microsoft Graph API, potentially requiring a JSON body with additional details.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_cancel(
        self, user_id: str, event_id: str, event_id1: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specific instance of a recurring event or a single event, allowing the organizer to send a custom cancellation message to attendees.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_decline(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event instance in a user's calendar using the Microsoft Graph API, allowing the option to propose a new time, and returns a status message.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_dismiss_reminder(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specified event instance in a user's calendar.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_forward(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific event instance to new recipients using the Microsoft Graph API, allowing the organizer or attendee to send the event to others.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_permanent_delete(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Permanently deletes a specific instance of a recurring event in a user's calendar and places it in the Purges folder in the dumpster, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specific event instance in a user's calendar by sending a POST request with a new reminder time.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specific instance of an event in a user's calendar, allowing the option to propose an alternative time, and returns a successful response upon completion.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific recurring event in a user's calendar using the provided user ID and event ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_delta(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Tracks changes to instances of a specific recurring event in a user's calendar using the delta query, allowing for incremental updates within a specified time range.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_accept(
        self,
        user_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event in the calendar of a given user using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_cancel(
        self, user_id: str, event_id: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specified calendar event for a user using the Microsoft Graph API, allowing the organizer to send a cancellation message to attendees and move the event to the Deleted Items folder.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_decline(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation in a user's calendar using the Microsoft Graph API and allows for optionally proposing a new time if supported by the event.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_dismiss_reminder(self, user_id: str, event_id: str) -> Any:
        """

        Dismisses a triggered reminder for a specified event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_forward(
        self,
        user_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event invitation to new recipients using the Microsoft Graph API, allowing the organizer or attendee to send the event to a specified list of recipients with an optional comment.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_permanent_delete(self, user_id: str, event_id: str) -> Any:
        """

        Permanently deletes a specified event from a user's calendar and moves it to the Purges folder in the mailbox dumpster, where it is inaccessible to email clients like Outlook.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a calendar event reminder for a specified user to a new time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specified event in a user's calendar, allowing the option to propose an alternative time if the event supports new time proposals.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves the count of calendar events for a specified user, allowing for optional search and filtering parameters.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_delta(
        self,
        user_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Tracks changes in calendar events for a specified user, using a delta query to retrieve incremental updates within a specified time range.

        Args:
            user_id (string): user-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/events/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_allowed_calendar_sharing_role(
        self,
        user_id: str,
        User: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the allowed calendar sharing roles for a specified user using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            User (string): User
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if User is None:
            raise ValueError("Missing required parameter 'User'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_get_schedule(
        self,
        user_id: str,
        Schedules: Optional[List[str]] = None,
        EndTime: Optional[dict[str, dict[str, Any]]] = None,
        StartTime: Optional[dict[str, dict[str, Any]]] = None,
        AvailabilityViewInterval: Optional[float] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the free/busy availability information for a specified user's calendar over a defined time period using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            Schedules (array): Schedules
            EndTime (object): EndTime
            StartTime (object): StartTime
            AvailabilityViewInterval (number): AvailabilityViewInterval

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "Schedules": Schedules,
            "EndTime": EndTime,
            "StartTime": StartTime,
            "AvailabilityViewInterval": AvailabilityViewInterval,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/microsoft.graph.getSchedule"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_permanent_delete(self, user_id: str) -> Any:
        """

        Permanently deletes a user's calendar folder and all its events, removing them from the mailbox.

        Args:
            user_id (string): user-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendar/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_list_calendar_group(
        self,
        user_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of calendar groups for a specified user using the provided user ID, allowing for optional filtering, sorting, and selection of fields.

        Args:
            user_id (string): user-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_create_calendar_group(
        self,
        user_id: str,
        id: Optional[str] = None,
        changeKey: Optional[str] = None,
        classId: Optional[str] = None,
        name: Optional[str] = None,
        calendars: Optional[List[Any]] = None,
    ) -> Any:
        """

        Creates a new calendar group for a specified user using the provided JSON payload and returns a response indicating the outcome of the operation.

        Args:
            user_id (string): user-id
            id (string): The unique identifier for an entity. Read-only.
            changeKey (string): Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            classId (string): The class identifier. Read-only.
            name (string): The group name.
            calendars (array): The calendars in the calendar group. Navigation property. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "changeKey": changeKey,
            "classId": classId,
            "name": name,
            "calendars": calendars,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_get_calendar_group(
        self,
        user_id: str,
        calendarGroup_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific calendar group for a user, allowing optional filtering and expansion of properties via query parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_update_calendar_group(
        self,
        user_id: str,
        calendarGroup_id: str,
        id: Optional[str] = None,
        changeKey: Optional[str] = None,
        classId: Optional[str] = None,
        name: Optional[str] = None,
        calendars: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates a specific calendar group for a user using the provided JSON data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            id (string): The unique identifier for an entity. Read-only.
            changeKey (string): Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            classId (string): The class identifier. Read-only.
            name (string): The group name.
            calendars (array): The calendars in the calendar group. Navigation property. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "changeKey": changeKey,
            "classId": classId,
            "name": name,
            "calendars": calendars,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_delete_calendar_group(self, user_id: str, calendarGroup_id: str) -> Any:
        """

        Deletes a specific calendar group associated with a user using the "DELETE" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_list_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of calendars for a specific calendar group belonging to a user, allowing for optional filtering, sorting, and selection of specific fields.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_create_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        id: Optional[str] = None,
        allowedOnlineMeetingProviders: Optional[List[str]] = None,
        canEdit: Optional[bool] = None,
        canShare: Optional[bool] = None,
        canViewPrivateItems: Optional[bool] = None,
        changeKey: Optional[str] = None,
        color: Optional[str] = None,
        defaultOnlineMeetingProvider: Optional[str] = None,
        hexColor: Optional[str] = None,
        isDefaultCalendar: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        isTallyingResponses: Optional[bool] = None,
        name: Optional[str] = None,
        owner: Optional[dict[str, dict[str, Any]]] = None,
        calendarPermissions: Optional[List[Any]] = None,
        calendarView: Optional[List[Any]] = None,
        events: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Adds a new calendar to a specified calendar group for a user using the provided JSON data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            id (string): The unique identifier for an entity. Read-only.
            allowedOnlineMeetingProviders (array): Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
            canEdit (boolean): true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
            canShare (boolean): true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
            canViewPrivateItems (boolean): If true, the user can read calendar items that have been marked private, false otherwise.
            changeKey (string): Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            color (string): color
            defaultOnlineMeetingProvider (string): defaultOnlineMeetingProvider
            hexColor (string): The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
            isDefaultCalendar (boolean): true if this is the default calendar where new events are created by default, false otherwise.
            isRemovable (boolean): Indicates whether this user calendar can be deleted from the user mailbox.
            isTallyingResponses (boolean): Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
            name (string): The calendar name.
            owner (object): owner
            calendarPermissions (array): The permissions of the users with whom the calendar is shared.
            calendarView (array): The calendar view for the calendar. Navigation property. Read-only.
            events (array): The events in the calendar. Navigation property. Read-only.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the calendar. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedOnlineMeetingProviders": allowedOnlineMeetingProviders,
            "canEdit": canEdit,
            "canShare": canShare,
            "canViewPrivateItems": canViewPrivateItems,
            "changeKey": changeKey,
            "color": color,
            "defaultOnlineMeetingProvider": defaultOnlineMeetingProvider,
            "hexColor": hexColor,
            "isDefaultCalendar": isDefaultCalendar,
            "isRemovable": isRemovable,
            "isTallyingResponses": isTallyingResponses,
            "name": name,
            "owner": owner,
            "calendarPermissions": calendarPermissions,
            "calendarView": calendarView,
            "events": events,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_get_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific calendar within a calendar group for a user, allowing optional selection and expansion of specific properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_update_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        id: Optional[str] = None,
        allowedOnlineMeetingProviders: Optional[List[str]] = None,
        canEdit: Optional[bool] = None,
        canShare: Optional[bool] = None,
        canViewPrivateItems: Optional[bool] = None,
        changeKey: Optional[str] = None,
        color: Optional[str] = None,
        defaultOnlineMeetingProvider: Optional[str] = None,
        hexColor: Optional[str] = None,
        isDefaultCalendar: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        isTallyingResponses: Optional[bool] = None,
        name: Optional[str] = None,
        owner: Optional[dict[str, dict[str, Any]]] = None,
        calendarPermissions: Optional[List[Any]] = None,
        calendarView: Optional[List[Any]] = None,
        events: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates a specific calendar in a user's calendar group using the PATCH method, requiring a JSON body specifying the changes.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            id (string): The unique identifier for an entity. Read-only.
            allowedOnlineMeetingProviders (array): Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
            canEdit (boolean): true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
            canShare (boolean): true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
            canViewPrivateItems (boolean): If true, the user can read calendar items that have been marked private, false otherwise.
            changeKey (string): Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            color (string): color
            defaultOnlineMeetingProvider (string): defaultOnlineMeetingProvider
            hexColor (string): The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
            isDefaultCalendar (boolean): true if this is the default calendar where new events are created by default, false otherwise.
            isRemovable (boolean): Indicates whether this user calendar can be deleted from the user mailbox.
            isTallyingResponses (boolean): Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
            name (string): The calendar name.
            owner (object): owner
            calendarPermissions (array): The permissions of the users with whom the calendar is shared.
            calendarView (array): The calendar view for the calendar. Navigation property. Read-only.
            events (array): The events in the calendar. Navigation property. Read-only.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the calendar. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedOnlineMeetingProviders": allowedOnlineMeetingProviders,
            "canEdit": canEdit,
            "canShare": canShare,
            "canViewPrivateItems": canViewPrivateItems,
            "changeKey": changeKey,
            "color": color,
            "defaultOnlineMeetingProvider": defaultOnlineMeetingProvider,
            "hexColor": hexColor,
            "isDefaultCalendar": isDefaultCalendar,
            "isRemovable": isRemovable,
            "isTallyingResponses": isTallyingResponses,
            "name": name,
            "owner": owner,
            "calendarPermissions": calendarPermissions,
            "calendarView": calendarView,
            "events": events,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_delete_calendar(
        self, user_id: str, calendarGroup_id: str, calendar_id: str
    ) -> Any:
        """

        Deletes the specified calendar within a calendar group for a given user.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_list_calendar_permission(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the permissions for a specific calendar within a calendar group belonging to a user, allowing for optional filtering, sorting, and selection of specific fields.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarPermissions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_create_calendar_permission(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        id: Optional[str] = None,
        allowedRoles: Optional[List[str]] = None,
        emailAddress: Optional[dict[str, dict[str, Any]]] = None,
        isInsideOrganization: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        role: Optional[str] = None,
    ) -> Any:
        """

        Assigns permissions to a calendar using the provided user ID, calendar group ID, and calendar ID, requiring a JSON body with the necessary permission details.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            id (string): The unique identifier for an entity. Read-only.
            allowedRoles (array): List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
            emailAddress (object): emailAddress
            isInsideOrganization (boolean): True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
            isRemovable (boolean): True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
            role (string): role

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedRoles": allowedRoles,
            "emailAddress": emailAddress,
            "isInsideOrganization": isInsideOrganization,
            "isRemovable": isRemovable,
            "role": role,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarPermissions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_get_calendar_permission(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        calendarPermission_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific calendar permission for a given calendar within a user's designated calendar group, optionally filtering or expanding the returned data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            calendarPermission_id (string): calendarPermission-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarPermissions/{calendarPermission_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_update_calendar_permission(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        calendarPermission_id: str,
        id: Optional[str] = None,
        allowedRoles: Optional[List[str]] = None,
        emailAddress: Optional[dict[str, dict[str, Any]]] = None,
        isInsideOrganization: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        role: Optional[str] = None,
    ) -> Any:
        """

        Updates specific calendar permissions for a designated user's calendar within a calendar group using a partial change request.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            calendarPermission_id (string): calendarPermission-id
            id (string): The unique identifier for an entity. Read-only.
            allowedRoles (array): List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
            emailAddress (object): emailAddress
            isInsideOrganization (boolean): True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
            isRemovable (boolean): True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
            role (string): role

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedRoles": allowedRoles,
            "emailAddress": emailAddress,
            "isInsideOrganization": isInsideOrganization,
            "isRemovable": isRemovable,
            "role": role,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarPermissions/{calendarPermission_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_delete_calendar_permission(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        calendarPermission_id: str,
    ) -> Any:
        """

        Deletes a specific calendar permission identified by the calendar permission ID within a calendar in a calendar group of a user.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            calendarPermission_id (string): calendarPermission-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarPermissions/{calendarPermission_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_permission_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of calendar permissions for a specific calendar using the "GET" method, identified by user ID, calendar group ID, and calendar ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarPermissions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_list_calendar_view(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a calendar view for a specified calendar within a calendar group, including events between a start and end date, and allows for filtering and sorting the results.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_get_calendar_view(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific event from a calendar using the event ID, allowing optional filtering by start and end date, and selective inclusion or expansion of event details.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_list_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves an attachment for a specific event in a calendar using the provided user ID, calendar group ID, calendar ID, and event ID, with optional query parameters for filtering and selecting data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_create_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specified event in a calendar using the POST method, requiring a JSON body and path parameters for user ID, calendar group ID, calendar ID, and event ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_get_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves the properties, relationships, or raw contents of a specific attachment associated with an event in a calendar belonging to a user's calendar group using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_delete_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        attachment_id: str,
    ) -> Any:
        """

        Deletes an attachment from a specific event in a calendar using the "DELETE" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_attachment_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event in a calendar using the "GET" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_attachment_create_upload_session(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload file ranges as attachments to a specified calendar event, returning an upload URL for subsequent file upload operations.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_get_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific event from a user's calendar within a calendar group, allowing optional selection and expansion of event properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_list_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves extensions for a specific event within a user’s calendar group using optional query parameters for filtering, ordering, and expanding results.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_create_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Adds custom extensions to a specific event within a calendar using the calendar view.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_get_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves an open extension for a specific event in a calendar using the Microsoft Graph API, allowing customization of event data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_update_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates an extension for a specific event in a calendar using the PATCH method by applying partial modifications to the resource identified by the user ID, calendar group ID, calendar ID, event ID, and extension ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_delete_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
    ) -> Any:
        """

        Deletes an extension from a specific event in a calendar using the provided user, calendar group, calendar, event, and extension identifiers.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_extension_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of calendar extensions for a specific event in a calendar, using parameters such as user ID, calendar group ID, calendar ID, and event ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_list_instance(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves instances of a recurring event in a specific calendar within a calendar group for a user, using specified start and end dates.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_get_instance(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific calendar event instance within a user's calendar group, filtered by time range and customizable field selection.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_list_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific instance of an event within a calendar, using various query parameters to filter, order, and select the output.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_create_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific calendar event instance using a POST request with a JSON body containing the attachment details.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_get_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves the properties, relationships, or raw contents of a specific attachment associated with a recurring event instance in a calendar belonging to a user's calendar group.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_delete_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
    ) -> Any:
        """

        Deletes a specific attachment from an event instance recurrence in a user's calendar group using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_attachment_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event instance in a calendar using the "GET" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_attachment_create_upload_session(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload ranges of a file as an attachment to a specific event instance in a calendar group, allowing for the attachment of files up to the maximum file size.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_get_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific instances of recurring events within a calendar view for a specified user's calendar group, allowing for optional expansion and selection of event properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_list_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves specific instances of a recurring event from a calendar, using parameters such as search, filter, and ordering options to customize the query.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_create_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Adds custom extensions to a specific instance of an event in a user's calendar using a POST request, specifying the user ID, calendar group ID, calendar ID, event ID, and instance event ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_get_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific extensions for a recurring event instance within a calendar, allowing for the selection and expansion of additional properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_update_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates an extension of a specific event instance in a calendar view using the PATCH method, applying partial modifications to the extension's properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_delete_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
    ) -> Any:
        """

        Deletes a specific extension from an event instance in a calendar view under a calendar group associated with a user, using the "DELETE" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_extension_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the number of instances of a specific recurring event in a user's calendar, using the provided event IDs and calendar details.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event instance in a user's calendar group using the Microsoft Graph API by sending a POST request to the defined path.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_cancel(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a specific instance of a recurring meeting event in a user's calendar group using the Microsoft Graph API, allowing the organizer to send a custom cancellation message to attendees.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_decline(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an invitation to a specific event instance within a calendar group's calendar using the Microsoft Graph API, allowing the option to propose a new time if supported by the event.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_dismiss_reminder(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
    ) -> Any:
        """

        Dismisses a reminder for a specific event instance in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_forward(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event to new recipients using the Microsoft Graph API, allowing the organizer or attendee to send the meeting request to additional participants.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_permanent_delete(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
    ) -> Any:
        """

        Permanently deletes a specific instance of a recurring event from a user's calendar group, calendar, and calendar view, placing it in the purges folder of the user's mailbox[1][2][5].

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_snooze_reminder(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones the reminder for a specific recurrence of a calendar event in a user's calendar group until a new specified time.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_tentatively_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specified recurring event instance from a user's calendar group and calendar, optionally including a comment or alternative time proposal in the request, and returns an accepted status if successful[1][3].

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific event in a calendar using the provided user, calendar group, calendar, and event identifiers.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_instance_delta(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Queries changes to instances of a specific event in a calendar using the delta function, allowing for incremental tracking of newly created, updated, or deleted event instances within a specified time frame.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event in a user's calendar group using the Microsoft Graph API, requiring the user ID, calendar group ID, calendar ID, and event ID in the path, and additional details in the request body.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_cancel(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a specified event in a calendar, allowing the organizer to send a cancellation message to attendees, and moves the event to the Deleted Items folder.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_decline(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation in a user's calendar group using the specified event ID and returns a response indicating the status of the decline operation.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_dismiss_reminder(
        self, user_id: str, calendarGroup_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specified event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_forward(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event from a specific calendar to new recipients, allowing the organizer or attendee to send the meeting request to additional people.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_permanent_delete(
        self, user_id: str, calendarGroup_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Permanently deletes a specified calendar event and places it in the Purges folder of the user's mailbox, where it is inaccessible to email clients like Outlook, and will be permanently deleted after a set period unless a mailbox hold is in place.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_snooze_reminder(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a reminder for a specified event in a user's calendar to a new time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_tentatively_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specified event in a user's calendar group, allowing for an optional new time proposal if the event allows it, and returns a status indicating the acceptance.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of calendar views for a specific calendar within a calendar group associated with a user.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_calendar_view_delta(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to events in a specified calendar view within a calendar group using the delta function, returning added, deleted, or updated events between the specified start and end dates.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/calendarView/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_list_event(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of events for a specified calendar, allowing for filtering, sorting, and selecting specific fields, within a calendar group owned by a particular user.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_create_event(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Creates a new event in a specific calendar using the provided JSON data, specified by the user ID, calendar group ID, and calendar ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_get_event(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific event identified by its ID in a calendar within a specified calendar group belonging to a user, allowing optional selection and expansion of specific event properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_update_event(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates an existing event in a calendar within a specific calendar group of a user using the PATCH method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_delete_event(
        self, user_id: str, calendarGroup_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Deletes a specific event identified by `{event-id}` within a calendar specified by `{calendar-id}`, belonging to a calendar group identified by `{calendarGroup-id}`, which is associated with a user identified by `{user-id}`.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_list_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific event in a calendar within a calendar group associated with a user, allowing for query parameters such as filtering, sorting, and expanding related data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_create_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event in a calendar using the provided JSON data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_get_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves the properties or raw content of a specific attachment from an event within a designated calendar and calendar group for a specified user[1].

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_delete_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        attachment_id: str,
    ) -> Any:
        """

        Deletes an attachment from a specific event in a calendar using the provided attachment ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_attachment_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specified calendar event belonging to a user, calendar group, and calendar.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_attachment_create_upload_session(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session for attaching a file to a specific event in a calendar, allowing iterative uploads of file ranges.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_get_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific event from a user's calendar by its ID, optionally allowing for the selection and expansion of certain event properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_list_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves event extensions for a specific event in a calendar, allowing for filtering, sorting, and selecting specific properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_create_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Adds custom extensions to an existing event in a specific calendar using the "POST" method, allowing for the creation of additional metadata or properties for the event.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_get_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific extension from an event in a calendar within a calendar group, allowing selection and expansion of properties using `$select` and `$expand` parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_update_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Modifies the specified event extension for a calendar, located within a calendar group associated with a user, by applying partial updates contained in the request body.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_delete_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
    ) -> Any:
        """

        Deletes a specific extension from a calendar event in the specified calendar group and calendar for the given user.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_extension_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extensions for a specific event identified by its ID, within a calendar specified by its ID, belonging to a calendar group and user, using the "GET" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_list_instance(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves specific event instances from a user's calendar, allowing for filtering by date range and other parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_get_instance(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific occurrence (instance) of a recurring event from a user's calendar within a specified calendar group and calendar, using the provided time range and optional query parameters[2][5].

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_list_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific instance of an event in a calendar, using the provided user ID, calendar group ID, calendar ID, event ID, and instance ID, with optional filtering and sorting parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_create_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event instance in a calendar using the "POST" method, requiring a JSON-formatted request body and identifying the event instance by user ID, calendar group ID, calendar ID, event ID, and a second event ID.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_get_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment from a recurring event instance in a user’s calendar group and specified calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_delete_attachment(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
    ) -> Any:
        """

        Deletes an attachment from a specific event instance in a calendar associated with a user's calendar group using the provided identifiers.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_attachment_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event instance within a calendar using the "GET" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_attachment_create_upload_session(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session for attaching files to a specific event instance in a calendar, allowing iterative uploads of file ranges.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_get_calendar(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves the calendar object for a specific event instance within a user's calendar group, allowing selection and expansion of event properties.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_list_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves an instance of a specific event within a calendar using the provided user, calendar group, calendar, event, and instance identifiers, allowing for optional filtering, sorting, and expansion of related data through query parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_create_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Creates a new extension on a specific event instance of a user’s calendar.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_get_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific extension attached to an instance of a recurring calendar event for a user’s designated calendar group and calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_update_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates the specified extension of an event instance in a calendar using the PATCH method, allowing for partial modifications to the resource.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_delete_extension(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
    ) -> Any:
        """

        Deletes an extension associated with a specific event instance in a user's calendar using the provided `user-id`, `calendarGroup-id`, `calendar-id`, `event-id`, `event-id1`, and `extension-id`.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_extension_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the total count of extensions associated with a specific calendar event instance for a given user, calendar group, and calendar, using the specified event and event instance identifiers.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific instance of an event in a user's calendar group using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_cancel(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a specific instance of a recurring event in a calendar group, allowing the organizer to send a cancellation message to attendees.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_decline(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an invitation to a specific instance of a recurring event in a user's calendar group using the Microsoft Graph API, allowing the invitee to optionally propose a new time.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_dismiss_reminder(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
    ) -> Any:
        """

        Dismisses a reminder for a specified event instance in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_forward(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event to new recipients using the Microsoft Graph API, allowing organizers or attendees to share the event with others.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_permanent_delete(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
    ) -> Any:
        """

        Permanently deletes a specific instance of a recurring event in a calendar and places it in the Purges folder, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_snooze_reminder(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specific event instance in a user's calendar group until a new time.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_tentatively_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specified event instance in a user's calendar group, allowing the option to propose a new time for the event.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of event instances for a specific event in a calendar, using the provided user ID, calendar group ID, calendar ID, and event ID, with optional search and filter parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_instance_delta(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Tracks changes in instances of a specific event within a calendar using the Microsoft Graph delta query, allowing applications to discover newly created, updated, or deleted event instances without performing a full read of the data.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts the specified event in a user’s calendar within a given calendar group and calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_cancel(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a calendar event for a specified user, sending a cancellation message to attendees and moving the event to the Deleted Items folder, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_decline(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation in a specified user's calendar group using the Microsoft Graph API, allowing the invitee to optionally propose a new time.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_dismiss_reminder(
        self, user_id: str, calendarGroup_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specified event in a user's calendar group using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_forward(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event to new recipients using the Microsoft Graph API, allowing organizers or attendees to share meeting requests with others.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_permanent_delete(
        self, user_id: str, calendarGroup_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Permanently deletes an event from a specific calendar in a calendar group and places it in the Purges folder in the user's mailbox.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_snooze_reminder(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a reminder for a specified event in a user's calendar group until a new time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_tentatively_accept(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event in a specific user's calendar group using the Microsoft Graph API, allowing for optional proposals of new meeting times.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_event_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of events in a specific calendar associated with a user's calendar group using the provided user ID, calendar group ID, and calendar ID, allowing for optional search and filter parameters.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_event_delta(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to events in a specific calendar using delta query, allowing for synchronization of new, updated, or deleted events between the specified start and end dates.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/events/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_allowed_calendar_sharing_role(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        User: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the allowed calendar sharing roles for a specified user in a specific calendar within a calendar group.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            User (string): User
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if User is None:
            raise ValueError("Missing required parameter 'User'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_calendar_get_schedule(
        self,
        user_id: str,
        calendarGroup_id: str,
        calendar_id: str,
        Schedules: Optional[List[str]] = None,
        EndTime: Optional[dict[str, dict[str, Any]]] = None,
        StartTime: Optional[dict[str, dict[str, Any]]] = None,
        AvailabilityViewInterval: Optional[float] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the schedule for a specific calendar within a calendar group belonging to a user, allowing for the retrieval of availability information for a specified period.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id
            Schedules (array): Schedules
            EndTime (object): EndTime
            StartTime (object): StartTime
            AvailabilityViewInterval (number): AvailabilityViewInterval

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "Schedules": Schedules,
            "EndTime": EndTime,
            "StartTime": StartTime,
            "AvailabilityViewInterval": AvailabilityViewInterval,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/microsoft.graph.getSchedule"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_permanent_delete(
        self, user_id: str, calendarGroup_id: str, calendar_id: str
    ) -> Any:
        """

        Permanently deletes a specified calendar and its associated events from a user's mailbox using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            calendar_id (string): calendar-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/{calendar_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_group_calendar_get_count(
        self,
        user_id: str,
        calendarGroup_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the number of calendars in a specific calendar group for a given user using the "GET" method.

        Args:
            user_id (string): user-id
            calendarGroup_id (string): calendarGroup-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendarGroup_id is None:
            raise ValueError("Missing required parameter 'calendarGroup-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/{calendarGroup_id}/calendars/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_group_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves the count of calendar groups for a specified user using the provided user ID.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendarGroup
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarGroups/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_list_calendar(
        self,
        user_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of calendars for a specified user, allowing for filtering, sorting, and expansion of additional details.

        Args:
            user_id (string): user-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_create_calendar(
        self,
        user_id: str,
        id: Optional[str] = None,
        allowedOnlineMeetingProviders: Optional[List[str]] = None,
        canEdit: Optional[bool] = None,
        canShare: Optional[bool] = None,
        canViewPrivateItems: Optional[bool] = None,
        changeKey: Optional[str] = None,
        color: Optional[str] = None,
        defaultOnlineMeetingProvider: Optional[str] = None,
        hexColor: Optional[str] = None,
        isDefaultCalendar: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        isTallyingResponses: Optional[bool] = None,
        name: Optional[str] = None,
        owner: Optional[dict[str, dict[str, Any]]] = None,
        calendarPermissions: Optional[List[Any]] = None,
        calendarView: Optional[List[Any]] = None,
        events: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Creates a new calendar for a specified user using the provided JSON data and returns a status message.

        Args:
            user_id (string): user-id
            id (string): The unique identifier for an entity. Read-only.
            allowedOnlineMeetingProviders (array): Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
            canEdit (boolean): true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
            canShare (boolean): true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
            canViewPrivateItems (boolean): If true, the user can read calendar items that have been marked private, false otherwise.
            changeKey (string): Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            color (string): color
            defaultOnlineMeetingProvider (string): defaultOnlineMeetingProvider
            hexColor (string): The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
            isDefaultCalendar (boolean): true if this is the default calendar where new events are created by default, false otherwise.
            isRemovable (boolean): Indicates whether this user calendar can be deleted from the user mailbox.
            isTallyingResponses (boolean): Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
            name (string): The calendar name.
            owner (object): owner
            calendarPermissions (array): The permissions of the users with whom the calendar is shared.
            calendarView (array): The calendar view for the calendar. Navigation property. Read-only.
            events (array): The events in the calendar. Navigation property. Read-only.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the calendar. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedOnlineMeetingProviders": allowedOnlineMeetingProviders,
            "canEdit": canEdit,
            "canShare": canShare,
            "canViewPrivateItems": canViewPrivateItems,
            "changeKey": changeKey,
            "color": color,
            "defaultOnlineMeetingProvider": defaultOnlineMeetingProvider,
            "hexColor": hexColor,
            "isDefaultCalendar": isDefaultCalendar,
            "isRemovable": isRemovable,
            "isTallyingResponses": isTallyingResponses,
            "name": name,
            "owner": owner,
            "calendarPermissions": calendarPermissions,
            "calendarView": calendarView,
            "events": events,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_get_calendar(
        self,
        user_id: str,
        calendar_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed information about a specific calendar associated with a user, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_update_calendar(
        self,
        user_id: str,
        calendar_id: str,
        id: Optional[str] = None,
        allowedOnlineMeetingProviders: Optional[List[str]] = None,
        canEdit: Optional[bool] = None,
        canShare: Optional[bool] = None,
        canViewPrivateItems: Optional[bool] = None,
        changeKey: Optional[str] = None,
        color: Optional[str] = None,
        defaultOnlineMeetingProvider: Optional[str] = None,
        hexColor: Optional[str] = None,
        isDefaultCalendar: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        isTallyingResponses: Optional[bool] = None,
        name: Optional[str] = None,
        owner: Optional[dict[str, dict[str, Any]]] = None,
        calendarPermissions: Optional[List[Any]] = None,
        calendarView: Optional[List[Any]] = None,
        events: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates a specified calendar for a user by applying partial modifications to its properties using a JSON request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            id (string): The unique identifier for an entity. Read-only.
            allowedOnlineMeetingProviders (array): Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
            canEdit (boolean): true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who shared a calendar and granted write access.
            canShare (boolean): true if the user has permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
            canViewPrivateItems (boolean): If true, the user can read calendar items that have been marked private, false otherwise.
            changeKey (string): Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            color (string): color
            defaultOnlineMeetingProvider (string): defaultOnlineMeetingProvider
            hexColor (string): The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
            isDefaultCalendar (boolean): true if this is the default calendar where new events are created by default, false otherwise.
            isRemovable (boolean): Indicates whether this user calendar can be deleted from the user mailbox.
            isTallyingResponses (boolean): Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
            name (string): The calendar name.
            owner (object): owner
            calendarPermissions (array): The permissions of the users with whom the calendar is shared.
            calendarView (array): The calendar view for the calendar. Navigation property. Read-only.
            events (array): The events in the calendar. Navigation property. Read-only.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the calendar. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedOnlineMeetingProviders": allowedOnlineMeetingProviders,
            "canEdit": canEdit,
            "canShare": canShare,
            "canViewPrivateItems": canViewPrivateItems,
            "changeKey": changeKey,
            "color": color,
            "defaultOnlineMeetingProvider": defaultOnlineMeetingProvider,
            "hexColor": hexColor,
            "isDefaultCalendar": isDefaultCalendar,
            "isRemovable": isRemovable,
            "isTallyingResponses": isTallyingResponses,
            "name": name,
            "owner": owner,
            "calendarPermissions": calendarPermissions,
            "calendarView": calendarView,
            "events": events,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_delete_calendar(self, user_id: str, calendar_id: str) -> Any:
        """

        Deletes a calendar associated with a specific user using the provided user ID and calendar ID.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_list_calendar_permission(
        self,
        user_id: str,
        calendar_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of calendar permissions for a specific user's calendar, allowing for filtering and sorting through query parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarPermissions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_create_calendar_permission(
        self,
        user_id: str,
        calendar_id: str,
        id: Optional[str] = None,
        allowedRoles: Optional[List[str]] = None,
        emailAddress: Optional[dict[str, dict[str, Any]]] = None,
        isInsideOrganization: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        role: Optional[str] = None,
    ) -> Any:
        """

        Creates a new calendar permission for a specific calendar belonging to a user.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            id (string): The unique identifier for an entity. Read-only.
            allowedRoles (array): List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
            emailAddress (object): emailAddress
            isInsideOrganization (boolean): True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
            isRemovable (boolean): True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
            role (string): role

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedRoles": allowedRoles,
            "emailAddress": emailAddress,
            "isInsideOrganization": isInsideOrganization,
            "isRemovable": isRemovable,
            "role": role,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarPermissions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_get_calendar_permission(
        self,
        user_id: str,
        calendar_id: str,
        calendarPermission_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific calendar permission details for a user, allowing optional filtering and expansion of results.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            calendarPermission_id (string): calendarPermission-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarPermissions/{calendarPermission_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_update_calendar_permission(
        self,
        user_id: str,
        calendar_id: str,
        calendarPermission_id: str,
        id: Optional[str] = None,
        allowedRoles: Optional[List[str]] = None,
        emailAddress: Optional[dict[str, dict[str, Any]]] = None,
        isInsideOrganization: Optional[bool] = None,
        isRemovable: Optional[bool] = None,
        role: Optional[str] = None,
    ) -> Any:
        """

        Updates the specified calendar permission for a user's calendar using a partial modification request.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            calendarPermission_id (string): calendarPermission-id
            id (string): The unique identifier for an entity. Read-only.
            allowedRoles (array): List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
            emailAddress (object): emailAddress
            isInsideOrganization (boolean): True if the user in context (recipient or delegate) is inside the same organization as the calendar owner.
            isRemovable (boolean): True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar.
            role (string): role

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "allowedRoles": allowedRoles,
            "emailAddress": emailAddress,
            "isInsideOrganization": isInsideOrganization,
            "isRemovable": isRemovable,
            "role": role,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarPermissions/{calendarPermission_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_delete_calendar_permission(
        self, user_id: str, calendar_id: str, calendarPermission_id: str
    ) -> Any:
        """

        Deletes a specific calendar permission for a user's calendar using the "DELETE" method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            calendarPermission_id (string): calendarPermission-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if calendarPermission_id is None:
            raise ValueError("Missing required parameter 'calendarPermission-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarPermissions/{calendarPermission_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_permission_get_count(
        self,
        user_id: str,
        calendar_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of calendar permissions for a specific calendar belonging to a user using the GET method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarPermissions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_list_calendar_view(
        self,
        user_id: str,
        calendar_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a calendar view for a specific user and calendar, using specified start and end dates, with optional filtering and sorting parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_get_calendar_view(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific event from a user's calendar using its ID, allowing for optional filtering by date range and selection of specific properties.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_list_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific event in a calendar view of a user's calendar.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_create_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event in a calendar view using the provided JSON data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment from an event in a user’s calendar using the specified identifiers and optional query parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_delete_attachment(
        self, user_id: str, calendar_id: str, event_id: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment from a specific event in a calendar view for a user using the "DELETE" method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_attachment_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments associated with a specific event in a user's calendar.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_attachment_create_upload_session(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload file ranges as an attachment to a specified calendar event, allowing for large file uploads.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_calendar(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific event from a user's calendar view using the "GET" method, allowing optional selection and expansion of event details.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_list_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves an extension for a specific event in a calendar view associated with a user and calendar, allowing for optional filtering and sorting of the response.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_create_extension(
        self, user_id: str, calendar_id: str, event_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds an extension to a specific calendar event in a user's calendar using the provided JSON data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific calendar event extension for a user, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_update_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates an extension for a specific event in a calendar view associated with a user's calendar using the PATCH method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_delete_extension(
        self, user_id: str, calendar_id: str, event_id: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension from a specific event in a calendar view for a user using the DELETE method, requiring user ID, calendar ID, event ID, and extension ID, and optionally including an If-Match header.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_extension_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of calendar view extensions for a specific event in a calendar associated with a user.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_list_instance(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves specific instances of a calendar event by event ID, within a specified date range, for a user's calendar, allowing for filtering and sorting of the results.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_get_instance(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        This API operation retrieves instances of a specific event in a user's calendar, allowing for the retrieval of occurrences and exceptions within a specified time range.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_list_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachment details for a specific event instance within a calendar view, using the provided user ID, calendar ID, event ID, and event instance ID, with optional filtering and ordering parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_create_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event instance in a calendar view for a user using the provided JSON data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment for an event instance within a calendar view using the "GET" method, allowing optional selection and expansion of specific data fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_delete_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
    ) -> Any:
        """

        Deletes an attachment from a specific event instance in a calendar view using the provided user ID, calendar ID, and event IDs.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_attachment_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event instance in a calendar using the provided user ID, calendar ID, event ID, and event instance ID.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_attachment_create_upload_session(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload ranges of a file as an attachment to a specified event instance in a user's calendar.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_calendar(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed information about a calendar event instance for a specific user and calendar using the "GET" method, allowing optional filtering with the `$select` and `$expand` query parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_list_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves detailed information about specific event instances within a calendar, allowing for filtering, sorting, and selecting specific data fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_create_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Adds custom extensions to a specific event instance in a calendar using the provided JSON data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves and potentially expands specific details of a calendar event instance's extension using the "GET" method, allowing selection and expansion of specified fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_update_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates a specific extension of an event instance in a calendar view for a given user, using a JSON PATCH document to apply partial modifications.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_delete_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
    ) -> Any:
        """

        Deletes a specific extension from an event instance in a calendar view for a given user.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_extension_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific event in a calendar view, using the provided user ID, calendar ID, event ID, and optional search and filter parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific event instance in a user's calendar (including recurring event instances) by sending a POST request with optional comment and response settings.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_cancel(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a specific instance of an event in a calendar using the Microsoft Graph API by sending a cancellation message to attendees and moving the event to the Deleted Items folder.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_decline(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation for a specific instance of a recurring event in a user's calendar, allowing the sender to propose an alternative time if supported.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_dismiss_reminder(
        self, user_id: str, calendar_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Dismisses a reminder that has been triggered for a specific event instance in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_forward(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific instance of a recurring event in a user's calendar to new recipients using the Microsoft Graph API, allowing organizers or attendees to send meeting requests to additional participants.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_permanent_delete(
        self, user_id: str, calendar_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Permanently deletes an event instance from a calendar view and places it in the Purges folder, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_snooze_reminder(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a calendar event reminder to a new time using the Microsoft Graph API by specifying the new reminder time in the request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_tentatively_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specified event instance in a user's calendar, allowing for optional proposals of new times, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific event in a calendar view, allowing for filtering and search parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_instance_delta(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to instances of a specific recurring event in a user's calendar view, allowing for synchronization of local event stores by fetching new, updated, or deleted instances within a specified time range.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event in a user's calendar using the Microsoft Graph API by sending a POST request with the user ID, calendar ID, and event ID.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_cancel(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a specified event and sends a cancellation message to attendees using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_decline(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an invitation to a specified event in a user's calendar, allowing the option to propose a new time if supported by the event.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_dismiss_reminder(
        self, user_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Dismisses a reminder for a specified event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_forward(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a calendar event to new recipients using the Microsoft Graph API, specifying a comment and recipients in the request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_permanent_delete(
        self, user_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Permanently deletes an event specified by its ID in a user's calendar, moving it to the Purges folder in their mailbox, where it is inaccessible to email clients and will be deleted after a set period unless a hold is applied.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_snooze_reminder(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a calendar event reminder to a new time by specifying the new reminder date and time in the request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_tentatively_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event in a specified user's calendar, allowing for the inclusion of an alternative meeting time if the event permits new time proposals.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_calendar_view_get_count(
        self,
        user_id: str,
        calendar_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of calendar view entries for a specified user and calendar.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_calendar_view_delta(
        self,
        user_id: str,
        calendar_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to events in a specified calendar view for a user, allowing synchronization of a local event store by fetching new, updated, or deleted events within a defined date range.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/calendarView/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_list_event(
        self,
        user_id: str,
        calendar_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of events for a specified user and calendar, allowing optional filtering, sorting, and expansion of event details.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_create_event(
        self,
        user_id: str,
        calendar_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Creates a new event in a specified calendar belonging to a particular user and returns information about the result.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_get_event(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific event identified by its ID within a calendar belonging to a user, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_update_event(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Updates a specific event in a user's calendar using a partial modification with JSON data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_delete_event(
        self, user_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Deletes a specific event identified by the event ID from a user's calendar using the DELETE method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_list_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachments for a specific event in a calendar associated with a user, allowing for filtering, sorting, and selecting specific data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_create_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Uploads an attachment to a specific event in a user’s calendar as specified by the user ID, calendar ID, and event ID, and expects the attachment data in JSON format in the request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment for an event in a calendar belonging to a user, allowing optional selection and expansion of properties using query parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_delete_attachment(
        self, user_id: str, calendar_id: str, event_id: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment from a specific event in a user's calendar using the "DELETE" method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_attachment_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event in a calendar belonging to a user using the GET method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_attachment_create_upload_session(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to attach a file to a specific event in a user's calendar, allowing iterative uploads of the file.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_calendar(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific calendar associated with an event in a user's calendar using the "GET" method, allowing optional filtering and expansion of returned data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_list_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves extensions for a specific event in a calendar belonging to a user, allowing for optional filtering and sorting of the response.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_create_extension(
        self, user_id: str, calendar_id: str, event_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds a custom extension to a specific event in a calendar associated with a user using the JSON data provided in the request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific event extension by its ID within a calendar event, allowing optional selection and expansion of properties using query parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_update_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates a specific extension of an event in a calendar for a user using the PATCH method, applying partial modifications defined in the JSON request body.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_delete_extension(
        self, user_id: str, calendar_id: str, event_id: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension associated with a specific event in a user's calendar using the provided user ID, calendar ID, event ID, and extension ID.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_extension_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of event extensions for a specific event in a calendar associated with a user using the "GET" method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_list_instance(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves instances of a specific event from a calendar belonging to a user, using query parameters to filter by date range and other criteria.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_get_instance(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific instances of a recurring event within a specified time range using the Microsoft Graph API, allowing for the selection and expansion of event properties.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_list_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachments for a specific event instance in a calendar belonging to a user, allowing for filtering, sorting, and selecting specific fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_create_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific instance of an event in a user's calendar, using the provided event and attachment details.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves an attachment from a specific event instance in a user's calendar using the "GET" method, with optional filtering and expansion of returned data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_delete_attachment(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
    ) -> Any:
        """

        Deletes an attachment from a specific event instance in a user's calendar using the provided attachment ID.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_attachment_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event instance in a calendar event using the provided user ID, calendar ID, event ID, and event instance ID.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_attachment_create_upload_session(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session enabling iterative upload of a file as an attachment to a specific event instance within a user’s calendar.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_calendar(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed information about a specific calendar for an event instance, allowing optional selection and expansion of fields via query parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_list_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves extension details for a specific event instance within a calendar belonging to a user, allowing for filtering, sorting, and selecting specific fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_create_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Adds extensions to a specific event instance in a calendar using the provided JSON data.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific extension details for an event instance in a calendar belonging to a user, allowing optional selection and expansion of data fields.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_update_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates a specific event instance extension within a calendar event by applying partial modifications using a JSON patch document.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_delete_extension(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
    ) -> Any:
        """

        Deletes an extension associated with a specific event instance in a calendar belonging to a user.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_extension_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extensions associated with a specific event instance within a user’s calendar.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific instance of an event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_cancel(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Cancels a specific instance of a recurring event in a user's calendar and sends a cancellation message to attendees using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_decline(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event instance in a user's calendar using the Microsoft Graph API, allowing the user to optionally propose a new time for the event.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_dismiss_reminder(
        self, user_id: str, calendar_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specific event instance in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_forward(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific instance of a recurring event in a user's calendar to new recipients using the Microsoft Graph API, allowing the organizer or attendees to share the event with additional participants.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_permanent_delete(
        self, user_id: str, calendar_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Permanently deletes a specific instance of a recurring event and places it in the Purges folder in the user's mailbox.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_snooze_reminder(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Postpones a reminder for a specific event instance in a user's calendar to a new time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_tentatively_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specific event instance in a user's calendar, allowing the option to propose a new time if supported by the event, and returns a successful response upon acceptance.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_instance_get_count(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific event in a calendar belonging to a user using the "GET" method.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_instance_delta(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to event instances in a specified calendar using the delta query method, allowing for synchronization of new, updated, or deleted events between the specified start and end dates.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event in a user's calendar using the Microsoft Graph API by sending a POST request to the "/users/{user-id}/calendars/{calendar-id}/events/{event-id}/microsoft.graph.accept" endpoint.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_cancel(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Sends a cancellation message from the event organizer to all attendees and cancels the specified event by moving it to the Deleted Items folder.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_decline(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an invitation to the specified event in a user’s calendar and optionally allows proposing a new meeting time[1][4][3].

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_dismiss_reminder(
        self, user_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Dismisses a triggered reminder for a specified event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_forward(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event from a specific user's calendar to new recipients using the Microsoft Graph API, allowing the organizer or attendee to send the event as an email with an .ics attachment.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_permanent_delete(
        self, user_id: str, calendar_id: str, event_id: str
    ) -> Any:
        """

        Permanently deletes an event and places it in the Purges folder in the user's mailbox using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_snooze_reminder(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specified event in a user's calendar by setting a new reminder time using the "POST" method, requiring a JSON body with the new reminder details.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_tentatively_accept(
        self,
        user_id: str,
        calendar_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event in a specified user's calendar, allowing for optional new time proposals and sending a response, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_event_get_count(
        self,
        user_id: str,
        calendar_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of events for a specific calendar associated with a user, allowing for optional search and filter parameters.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_event_delta(
        self,
        user_id: str,
        calendar_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Tracks changes to events in a specific calendar of a user within a given time range using the Microsoft Graph delta query, returning incremental changes such as newly created, updated, or deleted events.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/events/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_allowed_calendar_sharing_role(
        self,
        user_id: str,
        calendar_id: str,
        User: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the allowed calendar sharing roles for a specified user in a specific calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            User (string): User
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        if User is None:
            raise ValueError("Missing required parameter 'User'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/microsoft.graph.allowedCalendarSharingRoles(User='{User}')"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_get_schedule(
        self,
        user_id: str,
        calendar_id: str,
        Schedules: Optional[List[str]] = None,
        EndTime: Optional[dict[str, dict[str, Any]]] = None,
        StartTime: Optional[dict[str, dict[str, Any]]] = None,
        AvailabilityViewInterval: Optional[float] = None,
    ) -> dict[str, Any]:
        """

        Retrieves the schedule availability for a specified calendar of a user, allowing for the identification of free or busy times within a given time frame, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id
            Schedules (array): Schedules
            EndTime (object): EndTime
            StartTime (object): StartTime
            AvailabilityViewInterval (number): AvailabilityViewInterval

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        request_body_data = {
            "Schedules": Schedules,
            "EndTime": EndTime,
            "StartTime": StartTime,
            "AvailabilityViewInterval": AvailabilityViewInterval,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/microsoft.graph.getSchedule"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_permanent_delete(self, user_id: str, calendar_id: str) -> Any:
        """

        Permanently deletes a user's calendar and all its events, removing them from the mailbox.

        Args:
            user_id (string): user-id
            calendar_id (string): calendar-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if calendar_id is None:
            raise ValueError("Missing required parameter 'calendar-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/{calendar_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves the count of calendars for a specified user using the "GET" method.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.calendar
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendars/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_list_calendar_view(
        self,
        user_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a calendar view for a specific user, allowing filtering and sorting of events between specified start and end dates.

        Args:
            user_id (string): user-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_get_calendar_view(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a detailed calendar view for a specific event of a user, allowing optional selection and expansion of fields, within a specified date range.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_list_attachment(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachments for a specific event in a user's calendar view, allowing optional filtering, sorting, and selection of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_create_attachment(
        self,
        user_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific event in a user's calendar view using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_get_attachment(
        self,
        user_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific attachment for an event in a user's calendar view, optionally selecting and expanding specified fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_delete_attachment(
        self, user_id: str, event_id: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment from a specific event in a user's calendar view using the provided user ID, event ID, and attachment ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event in a user's calendar view.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to attach a file to a specified calendar event for a user, allowing iterative uploads of file ranges.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_get_calendar(
        self,
        user_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves and displays a specific calendar event for a user, allowing for selective data retrieval and expansion of related resources.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_list_extension(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves extensions for a specific calendar event associated with a user, allowing for filtering and sorting of results.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_create_extension(
        self, user_id: str, event_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds an extension to a specific event in a user's calendar view using the provided JSON payload.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_get_extension(
        self,
        user_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific extension of a calendar event for a specified user using its unique identifier.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_update_extension(
        self, user_id: str, event_id: str, extension_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Updates an extension for a specific event in a user's calendar view using a JSON patch document.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_delete_extension(
        self, user_id: str, event_id: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension associated with a specific event in a user's calendar view using the DELETE method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extensions for a specific event in a user's calendar view.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_list_instance(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves instances of a specific event for a user's calendar view within a specified date range.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_get_instance(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves specific instances of a calendar event for a given user by event and sub-event IDs, allowing optional selection and expansion of returned data within a specified time range.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_list_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves attachments for a specific event instance in a user's calendar view using the provided user ID, event ID, and event instance ID, allowing for optional filtering and sorting of results.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_create_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to a specific instance of an event in a user's calendar view using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_get_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific attachment of an event instance within a user's calendar view, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_delete_attachment(
        self, user_id: str, event_id: str, event_id1: str, attachment_id: str
    ) -> Any:
        """

        Deletes a specific attachment from an event instance in a user's calendar view using the provided user ID, event ID, event instance ID, and attachment ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the total count of attachments for a specified instance of a recurring event from a user's calendar, identified by the event and user IDs.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload a file as an attachment to a specific calendar event instance for a user.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_get_calendar(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed calendar information for a specific event instance associated with a user, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_list_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves instances of a specific event from a user's calendar view using the GET method, allowing for optional filtering and ordering of results.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_create_extension(
        self, user_id: str, event_id: str, event_id1: str, id: Optional[str] = None
    ) -> Any:
        """

        Adds an extension to a specific event instance in a user's calendar view using the provided JSON data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_get_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves an instance of a calendar event extension for a specified user, event, and extension, allowing optional selection and expansion of specific data fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_update_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates specific details of an event instance's extension using the provided JSON data for the user with the specified ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_delete_extension(
        self, user_id: str, event_id: str, event_id1: str, extension_id: str
    ) -> Any:
        """

        Deletes a specific extension from an event instance in a user's calendar view using the provided user ID, event ID, event instance ID, and extension ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extended instances for a specific event in a user's calendar view using the "GET" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific instance of a recurring event in a user’s calendar by sending a POST request to the specified path[1][2][3].

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_cancel(
        self, user_id: str, event_id: str, event_id1: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specific instance of a recurring event for a user using the Microsoft Graph API, allowing the organizer to send a cancellation message to attendees.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_decline(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event instance in a user's calendar view using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_dismiss_reminder(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Dismisses a reminder for a specific event instance in a user's calendar view using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_forward(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific instance of a recurring event in a user's calendar to new recipients using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_permanent_delete(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Permanently deletes a specific instance of an event from a user's calendar view and places it in the Purges folder, using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specific event instance in a user's calendar by sending a POST request with a new reminder time.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specific event instance in a user's calendar using the Microsoft Graph API, allowing for optional proposals of new meeting times.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_instance_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific calendar event identified by the event ID under a user's calendar view using the user ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_instance_delta(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes (additions, deletions, and updates) to specified instances of an event in a user’s calendar view within the given date range[1][2][3].

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_accept(
        self,
        user_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specific calendar event for the specified user and updates the event response status accordingly.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_cancel(
        self, user_id: str, event_id: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specified event using the Microsoft Graph API, allowing the organizer to send a cancellation message to attendees and move the event to the Deleted Items folder.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_decline(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation in a user's calendar using the Microsoft Graph API, allowing for optional proposals of new meeting times.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_dismiss_reminder(self, user_id: str, event_id: str) -> Any:
        """

        Dismisses a reminder for the specified event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_forward(
        self,
        user_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a calendar event to new recipients using the Microsoft Graph API by sending the event as an email with an .ics attachment, allowing the recipient to add it to their calendar.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_permanent_delete(self, user_id: str, event_id: str) -> Any:
        """

        Permanently deletes an event by moving it to the Purges folder in the user's mailbox, making it inaccessible to email clients like Outlook, unless a hold is set on the mailbox.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a calendar event reminder for a specified user by setting a new reminder time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event in a user's calendar view using the Microsoft Graph API, allowing the user to propose an alternate time if supported by the event settings.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_calendar_view_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves a count of calendar view items for a specified user using the "GET" method, allowing for optional search and filter parameters.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_calendar_view_delta(
        self,
        user_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes (additions, deletions, or updates) to events within a specified time range from a user’s calendar view, supporting synchronization with a local store[1][2][3].

        Args:
            user_id (string): user-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/calendarView/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_list_event(
        self,
        user_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of events for a specific user, allowing for filtering, sorting, and pagination of the results.

        Args:
            user_id (string): user-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_create_event(
        self,
        user_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Creates an event for a specified user using the provided JSON data.

        Args:
            user_id (string): user-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_get_event(
        self,
        user_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details of a specific event associated with a user, allowing optional selection and expansion of event fields using query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_update_event(
        self,
        user_id: str,
        event_id: str,
        id: Optional[str] = None,
        categories: Optional[List[str]] = None,
        changeKey: Optional[str] = None,
        createdDateTime: Optional[str] = None,
        lastModifiedDateTime: Optional[str] = None,
        allowNewTimeProposals: Optional[bool] = None,
        attendees: Optional[List[Any]] = None,
        body: Optional[dict[str, dict[str, Any]]] = None,
        bodyPreview: Optional[str] = None,
        end: Optional[dict[str, dict[str, Any]]] = None,
        hasAttachments: Optional[bool] = None,
        hideAttendees: Optional[bool] = None,
        iCalUId: Optional[str] = None,
        importance: Optional[str] = None,
        isAllDay: Optional[bool] = None,
        isCancelled: Optional[bool] = None,
        isDraft: Optional[bool] = None,
        isOnlineMeeting: Optional[bool] = None,
        isOrganizer: Optional[bool] = None,
        isReminderOn: Optional[bool] = None,
        location: Optional[dict[str, dict[str, Any]]] = None,
        locations: Optional[List[dict[str, dict[str, Any]]]] = None,
        onlineMeeting: Optional[dict[str, dict[str, Any]]] = None,
        onlineMeetingProvider: Optional[str] = None,
        onlineMeetingUrl: Optional[str] = None,
        organizer: Optional[dict[str, dict[str, Any]]] = None,
        originalEndTimeZone: Optional[str] = None,
        originalStart: Optional[str] = None,
        originalStartTimeZone: Optional[str] = None,
        recurrence: Optional[dict[str, dict[str, Any]]] = None,
        reminderMinutesBeforeStart: Optional[float] = None,
        responseRequested: Optional[bool] = None,
        responseStatus: Optional[dict[str, dict[str, Any]]] = None,
        sensitivity: Optional[str] = None,
        seriesMasterId: Optional[str] = None,
        showAs: Optional[str] = None,
        start: Optional[dict[str, dict[str, Any]]] = None,
        subject: Optional[str] = None,
        transactionId: Optional[str] = None,
        type: Optional[str] = None,
        webLink: Optional[str] = None,
        attachments: Optional[List[Any]] = None,
        calendar: Optional[Any] = None,
        extensions: Optional[List[Any]] = None,
        instances: Optional[List[Any]] = None,
        multiValueExtendedProperties: Optional[List[Any]] = None,
        singleValueExtendedProperties: Optional[List[Any]] = None,
    ) -> Any:
        """

        Partially updates a specific event for a given user using the PATCH method, requiring a JSON body with the modifications to apply.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            categories (array): The categories associated with the item
            changeKey (string): Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
            createdDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            allowNewTimeProposals (boolean): true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. The default is true.
            attendees (array): The collection of attendees for the event.
            body (object): body
            bodyPreview (string): The preview of the message associated with the event. It's in text format.
            end (object): end
            hasAttachments (boolean): Set to true if the event has attachments.
            hideAttendees (boolean): When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. The default is false.
            iCalUId (string): A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
            importance (string): importance
            isAllDay (boolean): Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start, and endtime must be set to midnight and be in the same time zone.
            isCancelled (boolean): Set to true if the event has been canceled.
            isDraft (boolean): Set to true if the user has updated the meeting in Outlook but hasn't sent the updates to attendees. Set to false if all changes are sent, or if the event is an appointment without any attendees.
            isOnlineMeeting (boolean): True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently, Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online.
            isOrganizer (boolean): Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). It also applies if a delegate organized the event on behalf of the owner.
            isReminderOn (boolean): Set to true if an alert is set to remind the user of the event.
            location (object): location
            locations (array): The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection are removed and replaced by the new location value.
            onlineMeeting (object): onlineMeeting
            onlineMeetingProvider (string): onlineMeetingProvider
            onlineMeetingUrl (string): A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future.
            organizer (object): organizer
            originalEndTimeZone (string): The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            originalStart (string): Represents the start time of an event when it's initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            originalStartTimeZone (string): The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook.
            recurrence (object): recurrence
            reminderMinutesBeforeStart (number): The number of minutes before the event start time that the reminder alert occurs.
            responseRequested (boolean): Default is true, which represents the organizer would like an invitee to send a response to the event.
            responseStatus (object): responseStatus
            sensitivity (string): sensitivity
            seriesMasterId (string): The ID for the recurring series master item, if this event is part of a recurring series.
            showAs (string): showAs
            start (object): start
            subject (string): The text of the event's subject line.
            transactionId (string): A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. It's useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you can't change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional.
            type (string): type
            webLink (string): The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL can't be accessed from within an iFrame.
            attachments (array): The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
            calendar (string): calendar
            extensions (array): The collection of open extensions defined for the event. Nullable.
            instances (array): The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions modified, but doesn't include occurrences cancelled from the series. Navigation property. Read-only. Nullable.
            multiValueExtendedProperties (array): The collection of multi-value extended properties defined for the event. Read-only. Nullable.
            singleValueExtendedProperties (array): The collection of single-value extended properties defined for the event. Read-only. Nullable.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "categories": categories,
            "changeKey": changeKey,
            "createdDateTime": createdDateTime,
            "lastModifiedDateTime": lastModifiedDateTime,
            "allowNewTimeProposals": allowNewTimeProposals,
            "attendees": attendees,
            "body": body,
            "bodyPreview": bodyPreview,
            "end": end,
            "hasAttachments": hasAttachments,
            "hideAttendees": hideAttendees,
            "iCalUId": iCalUId,
            "importance": importance,
            "isAllDay": isAllDay,
            "isCancelled": isCancelled,
            "isDraft": isDraft,
            "isOnlineMeeting": isOnlineMeeting,
            "isOrganizer": isOrganizer,
            "isReminderOn": isReminderOn,
            "location": location,
            "locations": locations,
            "onlineMeeting": onlineMeeting,
            "onlineMeetingProvider": onlineMeetingProvider,
            "onlineMeetingUrl": onlineMeetingUrl,
            "organizer": organizer,
            "originalEndTimeZone": originalEndTimeZone,
            "originalStart": originalStart,
            "originalStartTimeZone": originalStartTimeZone,
            "recurrence": recurrence,
            "reminderMinutesBeforeStart": reminderMinutesBeforeStart,
            "responseRequested": responseRequested,
            "responseStatus": responseStatus,
            "sensitivity": sensitivity,
            "seriesMasterId": seriesMasterId,
            "showAs": showAs,
            "start": start,
            "subject": subject,
            "transactionId": transactionId,
            "type": type,
            "webLink": webLink,
            "attachments": attachments,
            "calendar": calendar,
            "extensions": extensions,
            "instances": instances,
            "multiValueExtendedProperties": multiValueExtendedProperties,
            "singleValueExtendedProperties": singleValueExtendedProperties,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_delete_event(self, user_id: str, event_id: str) -> Any:
        """

        Deletes a specific event associated with a user, identified by the user ID and event ID, using the DELETE method.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_event_list_attachment(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachment objects attached to a specific event identified by the user ID and event ID using the GET method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_create_attachment(
        self,
        user_id: str,
        event_id: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Adds an attachment to an existing event for a specified user using the POST method and returns a status message.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_get_attachment(
        self,
        user_id: str,
        event_id: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific attachment from an event associated with a user, allowing optional query parameters to customize the response.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_delete_attachment(
        self, user_id: str, event_id: str, attachment_id: str
    ) -> Any:
        """

        Deletes an attachment associated with a specific event for a user using the "DELETE" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_event_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific event associated with a user, using the provided user ID and event ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session for attaching files to a specified event in a user's calendar, allowing iterative uploads of file ranges.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_get_calendar(
        self,
        user_id: str,
        event_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific calendar event for a user, allowing optional selection and expansion of properties via query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_list_extension(
        self,
        user_id: str,
        event_id: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves extensions for a specific event associated with a user, allowing for optional filtering, sorting, and selection of data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_create_extension(
        self, user_id: str, event_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Creates an extension for a specific event associated with a user by sending a POST request to the "/users/{user-id}/events/{event-id}/extensions" path with the extension details in the request body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_get_extension(
        self,
        user_id: str,
        event_id: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific extension for an event associated with a user, allowing optional selection and expansion of specific fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_update_extension(
        self, user_id: str, event_id: str, extension_id: str, id: Optional[str] = None
    ) -> Any:
        """

        Updates an extension for a specific event associated with a user using the PATCH method, requiring a JSON body to specify the changes.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_event_delete_extension(
        self, user_id: str, event_id: str, extension_id: str
    ) -> Any:
        """

        Deletes the specified extension from a user's event using the DELETE method, requiring user-id, event-id, and extension-id as path parameters[2][3][5].

        Args:
            user_id (string): user-id
            event_id (string): event-id
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_event_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of extensions for a specific event associated with a user using the GET method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_list_instance(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of event instances for a specified user and event, filtered by start and end dates, with optional parameters for sorting, selecting, and expanding related data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_get_instance(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        startDateTime: str,
        endDateTime: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves a specific event instance (event-id1) for a user (user-id) and event (event-id), optionally filtering and expanding results by date range and specified fields.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            startDateTime (string): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
            endDateTime (string): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_list_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves a list of attachments for a specific event instance associated with a user, allowing for filtering, sorting, and selection of specific data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_create_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        id: Optional[str] = None,
        contentType: Optional[str] = None,
        isInline: Optional[bool] = None,
        lastModifiedDateTime: Optional[str] = None,
        name: Optional[str] = None,
        size: Optional[float] = None,
    ) -> Any:
        """

        Creates an attachment for a specific instance of an event associated with a user, using the provided JSON data in the request body.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.
            contentType (string): The MIME type.
            isInline (boolean): true if the attachment is an inline attachment; otherwise, false.
            lastModifiedDateTime (string): The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
            name (string): The attachment's file name.
            size (number): The length of the attachment in bytes.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "id": id,
            "contentType": contentType,
            "isInline": isInline,
            "lastModifiedDateTime": lastModifiedDateTime,
            "name": name,
            "size": size,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/attachments"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_get_attachment(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        attachment_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific attachment associated with an event instance for a user, allowing optional selection and expansion of related data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_delete_attachment(
        self, user_id: str, event_id: str, event_id1: str, attachment_id: str
    ) -> Any:
        """

        Deletes a specific attachment from an event instance associated with a user, using the provided user ID, event ID, event instance ID, and attachment ID.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            attachment_id (string): attachment-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if attachment_id is None:
            raise ValueError("Missing required parameter 'attachment-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/attachments/{attachment_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_attachment_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of attachments for a specific instance of an event within a user's events using the "GET" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/attachments/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_attachment_create_upload_session(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        AttachmentItem: Optional[dict[str, dict[str, Any]]] = None,
    ) -> dict[str, Any]:
        """

        Creates an upload session to iteratively upload ranges of a file as an attachment to a specific event instance for a user, returning an upload URL and session details.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            AttachmentItem (object): AttachmentItem

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"AttachmentItem": AttachmentItem}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/attachments/microsoft.graph.createUploadSession"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_get_calendar(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves details about a specific event instance for a user, allowing optional selection and expansion of fields via query parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/calendar"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_list_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        orderby: Optional[List[str]] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves event extension instances for a specific user's event using the GET method, allowing for filtering, sorting, and selecting specific data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            orderby (array): Order items by property values
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Retrieved collection

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {
            k: v
            for k, v in [
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$orderby", orderby),
                ("$select", select),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_create_extension(
        self, user_id: str, event_id: str, event_id1: str, id: Optional[str] = None
    ) -> Any:
        """

        Creates or updates an extension for a specific event instance associated with a user's event using the provided JSON payload.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Created navigation property.

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/extensions"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_get_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> Any:
        """

        Retrieves detailed information about a specific extension instance associated with an event instance for a user, allowing selective retrieval and expansion of related data.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            select (array): Select properties to be returned
            expand (array): Expand related entities

        Returns:
            Any: Retrieved navigation property

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {
            k: v for k, v in [("$select", select), ("$expand", expand)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_update_extension(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        extension_id: str,
        id: Optional[str] = None,
    ) -> Any:
        """

        Updates the specified extension of an event instance for a user using a JSON patch document.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id
            id (string): The unique identifier for an entity. Read-only.

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        request_body_data = None
        request_body_data = {"id": id}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._patch(url, data=request_body_data, params=query_params)
        return self._handle_response(response)

    def user_event_instance_delete_extension(
        self, user_id: str, event_id: str, event_id1: str, extension_id: str
    ) -> Any:
        """

        Deletes an extension identified by the specified extension ID from an event instance associated with a user, using the "DELETE" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            extension_id (string): extension-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        if extension_id is None:
            raise ValueError("Missing required parameter 'extension-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/extensions/{extension_id}"
        query_params = {}
        response = self._delete(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_extension_get_count(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific event extension using the GET method, allowing optional search and filter parameters.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/extensions/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts a specified event instance in a user's calendar using the Microsoft Graph API, requiring a POST request with a JSON body to the path "/users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.accept".

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_cancel(
        self, user_id: str, event_id: str, event_id1: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specific instance of a recurring meeting event for a user, allowing the organizer to send a cancellation message to attendees.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_decline(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an instance of a recurring event for a specified user, allowing the option to propose a new time if the event supports it.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_dismiss_reminder(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Dismisses the reminder that has been triggered for a specific event instance in a user's calendar[1][2][4].

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_forward(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a specific instance of a recurring event to a new recipient using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_permanent_delete(
        self, user_id: str, event_id: str, event_id1: str
    ) -> Any:
        """

        Permanently deletes an event instance using the Microsoft Graph API, moving it to the purges folder and making it inaccessible to email clients.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specific event instance in a user's calendar by setting a new reminder time using the POST method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        event_id1: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts a specified event instance in a user's calendar, allowing the option to propose a new time if supported by the event.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            event_id1 (string): event-id1
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        if event_id1 is None:
            raise ValueError("Missing required parameter 'event-id1'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/{event_id1}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_instance_get_count(
        self,
        user_id: str,
        event_id: str,
        search: Optional[str] = None,
        filter: Optional[str] = None,
    ) -> Any:
        """

        Retrieves the count of instances for a specific event associated with a user using the "GET" method.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_instance_delta(
        self,
        user_id: str,
        event_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Tracks changes to instances of a specific event for a user using the delta query, allowing retrieval of newly created, updated, or deleted instances within a specified time frame.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/instances/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_accept(
        self,
        user_id: str,
        event_id: str,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Accepts the specified event on behalf of the specified user and sends an acceptance response to the organizer.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"SendResponse": SendResponse, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.accept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_cancel(
        self, user_id: str, event_id: str, Comment: Optional[str] = None
    ) -> Any:
        """

        Cancels a specified event and sends a cancellation message to attendees from the organizer using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.cancel"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_decline(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Declines an event invitation for a specified user and event, allowing the option to propose a new time and send a response comment.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.decline"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_dismiss_reminder(self, user_id: str, event_id: str) -> Any:
        """

        Dismisses a reminder that has been triggered for a specific event in a user's calendar using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.dismissReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_forward(
        self,
        user_id: str,
        event_id: str,
        ToRecipients: Optional[List[dict[str, dict[str, Any]]]] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Forwards a meeting event to new recipients using the specified user ID and event ID, allowing organizers or attendees to send the meeting request to additional people.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ToRecipients (array): ToRecipients
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"ToRecipients": ToRecipients, "Comment": Comment}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.forward"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_permanent_delete(self, user_id: str, event_id: str) -> Any:
        """

        Permanently deletes an event in a user's calendar using the Microsoft Graph API and returns a status message indicating successful deletion.

        Args:
            user_id (string): user-id
            event_id (string): event-id

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.permanentDelete"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_snooze_reminder(
        self,
        user_id: str,
        event_id: str,
        NewReminderTime: Optional[dict[str, dict[str, Any]]] = None,
    ) -> Any:
        """

        Snoozes a reminder for a specified event in a user's calendar by setting a new reminder time using the Microsoft Graph API.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            NewReminderTime (object): NewReminderTime

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {"NewReminderTime": NewReminderTime}
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.snoozeReminder"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_tentatively_accept(
        self,
        user_id: str,
        event_id: str,
        ProposedNewTime: Optional[dict[str, dict[str, Any]]] = None,
        SendResponse: Optional[bool] = None,
        Comment: Optional[str] = None,
    ) -> Any:
        """

        Tentatively accepts an event in a user's calendar using the Microsoft Graph API, allowing the option to propose an alternative meeting time if supported by the event settings.

        Args:
            user_id (string): user-id
            event_id (string): event-id
            ProposedNewTime (object): ProposedNewTime
            SendResponse (boolean): SendResponse
            Comment (string): Comment

        Returns:
            Any: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        if event_id is None:
            raise ValueError("Missing required parameter 'event-id'.")
        request_body_data = None
        request_body_data = {
            "ProposedNewTime": ProposedNewTime,
            "SendResponse": SendResponse,
            "Comment": Comment,
        }
        request_body_data = {
            k: v for k, v in request_body_data.items() if v is not None
        }
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/{event_id}/microsoft.graph.tentativelyAccept"
        query_params = {}
        response = self._post(
            url,
            data=request_body_data,
            params=query_params,
            content_type="application/json",
        )
        return self._handle_response(response)

    def user_event_get_count(
        self, user_id: str, search: Optional[str] = None, filter: Optional[str] = None
    ) -> Any:
        """

        Retrieves the count of events associated with a specific user identified by the provided {user-id}, supporting additional filtering and search capabilities.

        Args:
            user_id (string): user-id
            search (string): Search items by search phrases
            filter (string): Filter items by property values

        Returns:
            Any: The count of the resource

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/$count"
        query_params = {
            k: v for k, v in [("$search", search), ("$filter", filter)] if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def user_event_delta(
        self,
        user_id: str,
        startDateTime: str,
        endDateTime: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        search: Optional[str] = None,
        filter: Optional[str] = None,
        count: Optional[bool] = None,
        select: Optional[List[str]] = None,
        orderby: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
    ) -> dict[str, Any]:
        """

        Retrieves incremental changes to a user’s calendar events within a specified date range, supporting optional filtering, sorting, and property selection.

        Args:
            user_id (string): user-id
            startDateTime (string): The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            endDateTime (string): The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
            top (integer): Show only the first n items Example: '50'.
            skip (integer): Skip the first n items
            search (string): Search items by search phrases
            filter (string): Filter items by property values
            count (boolean): Include count of items
            select (array): Select properties to be returned
            orderby (array): Order items by property values
            expand (array): Expand related entities

        Returns:
            dict[str, Any]: Success

        Raises:
            HTTPStatusError: Raised when the API request fails with detailed error information including status code and response body.

        Tags:
            users.event
        """
        if user_id is None:
            raise ValueError("Missing required parameter 'user-id'.")
        url = f"{self.main_app_client.base_url}/users/{user_id}/events/microsoft.graph.delta()"
        query_params = {
            k: v
            for k, v in [
                ("startDateTime", startDateTime),
                ("endDateTime", endDateTime),
                ("$top", top),
                ("$skip", skip),
                ("$search", search),
                ("$filter", filter),
                ("$count", count),
                ("$select", select),
                ("$orderby", orderby),
                ("$expand", expand),
            ]
            if v is not None
        }
        response = self._get(url, params=query_params)
        return self._handle_response(response)

    def list_tools(self):
        return [
            self.user_get_calendar,
            self.user_update_calendar,
            self.user_calendar_list_calendar_permission,
            self.user_calendar_create_calendar_permission,
            self.user_calendar_get_calendar_permission,
            self.user_calendar_update_calendar_permission,
            self.user_calendar_delete_calendar_permission,
            self.user_calendar_calendar_permission_get_count,
            self.user_calendar_list_calendar_view,
            self.user_calendar_get_calendar_view,
            self.user_calendar_calendar_view_list_attachment,
            self.user_calendar_calendar_view_create_attachment,
            self.user_calendar_calendar_view_get_attachment,
            self.user_calendar_calendar_view_delete_attachment,
            self.user_calendar_calendar_view_attachment_get_count,
            self.user_calendar_calendar_view_attachment_create_upload_session,
            self.user_calendar_calendar_view_get_calendar,
            self.user_calendar_calendar_view_list_extension,
            self.user_calendar_calendar_view_create_extension,
            self.user_calendar_calendar_view_get_extension,
            self.user_calendar_calendar_view_update_extension,
            self.user_calendar_calendar_view_delete_extension,
            self.user_calendar_calendar_view_extension_get_count,
            self.user_calendar_calendar_view_list_instance,
            self.user_calendar_calendar_view_get_instance,
            self.user_calendar_calendar_view_instance_list_attachment,
            self.user_calendar_calendar_view_instance_create_attachment,
            self.user_calendar_calendar_view_instance_get_attachment,
            self.user_calendar_calendar_view_instance_delete_attachment,
            self.user_calendar_calendar_view_instance_attachment_get_count,
            self.user_calendar_calendar_view_instance_attachment_create_upload_session,
            self.user_calendar_calendar_view_instance_get_calendar,
            self.user_calendar_calendar_view_instance_list_extension,
            self.user_calendar_calendar_view_instance_create_extension,
            self.user_calendar_calendar_view_instance_get_extension,
            self.user_calendar_calendar_view_instance_update_extension,
            self.user_calendar_calendar_view_instance_delete_extension,
            self.user_calendar_calendar_view_instance_extension_get_count,
            self.user_calendar_calendar_view_instance_accept,
            self.user_calendar_calendar_view_instance_cancel,
            self.user_calendar_calendar_view_instance_decline,
            self.user_calendar_calendar_view_instance_dismiss_reminder,
            self.user_calendar_calendar_view_instance_forward,
            self.user_calendar_calendar_view_instance_permanent_delete,
            self.user_calendar_calendar_view_instance_snooze_reminder,
            self.user_calendar_calendar_view_instance_tentatively_accept,
            self.user_calendar_calendar_view_instance_get_count,
            self.user_calendar_calendar_view_instance_delta,
            self.user_calendar_calendar_view_accept,
            self.user_calendar_calendar_view_cancel,
            self.user_calendar_calendar_view_decline,
            self.user_calendar_calendar_view_dismiss_reminder,
            self.user_calendar_calendar_view_forward,
            self.user_calendar_calendar_view_permanent_delete,
            self.user_calendar_calendar_view_snooze_reminder,
            self.user_calendar_calendar_view_tentatively_accept,
            self.user_calendar_calendar_view_get_count,
            self.user_calendar_calendar_view_delta,
            self.user_calendar_list_event,
            self.user_calendar_create_event,
            self.user_calendar_get_event,
            self.user_calendar_update_event,
            self.user_calendar_delete_event,
            self.user_calendar_event_list_attachment,
            self.user_calendar_event_create_attachment,
            self.user_calendar_event_get_attachment,
            self.user_calendar_event_delete_attachment,
            self.user_calendar_event_attachment_get_count,
            self.user_calendar_event_attachment_create_upload_session,
            self.user_calendar_event_get_calendar,
            self.user_calendar_event_list_extension,
            self.user_calendar_event_create_extension,
            self.user_calendar_event_get_extension,
            self.user_calendar_event_update_extension,
            self.user_calendar_event_delete_extension,
            self.user_calendar_event_extension_get_count,
            self.user_calendar_event_list_instance,
            self.user_calendar_event_get_instance,
            self.user_calendar_event_instance_list_attachment,
            self.user_calendar_event_instance_create_attachment,
            self.user_calendar_event_instance_get_attachment,
            self.user_calendar_event_instance_delete_attachment,
            self.user_calendar_event_instance_attachment_get_count,
            self.user_calendar_event_instance_attachment_create_upload_session,
            self.user_calendar_event_instance_get_calendar,
            self.user_calendar_event_instance_list_extension,
            self.user_calendar_event_instance_create_extension,
            self.user_calendar_event_instance_get_extension,
            self.user_calendar_event_instance_update_extension,
            self.user_calendar_event_instance_delete_extension,
            self.user_calendar_event_instance_extension_get_count,
            self.user_calendar_event_instance_accept,
            self.user_calendar_event_instance_cancel,
            self.user_calendar_event_instance_decline,
            self.user_calendar_event_instance_dismiss_reminder,
            self.user_calendar_event_instance_forward,
            self.user_calendar_event_instance_permanent_delete,
            self.user_calendar_event_instance_snooze_reminder,
            self.user_calendar_event_instance_tentatively_accept,
            self.user_calendar_event_instance_get_count,
            self.user_calendar_event_instance_delta,
            self.user_calendar_event_accept,
            self.user_calendar_event_cancel,
            self.user_calendar_event_decline,
            self.user_calendar_event_dismiss_reminder,
            self.user_calendar_event_forward,
            self.user_calendar_event_permanent_delete,
            self.user_calendar_event_snooze_reminder,
            self.user_calendar_event_tentatively_accept,
            self.user_calendar_event_get_count,
            self.user_calendar_event_delta,
            self.user_calendar_allowed_calendar_sharing_role,
            self.user_calendar_get_schedule,
            self.user_calendar_permanent_delete,
            self.user_list_calendar_group,
            self.user_create_calendar_group,
            self.user_get_calendar_group,
            self.user_update_calendar_group,
            self.user_delete_calendar_group,
            self.user_calendar_group_list_calendar,
            self.user_calendar_group_create_calendar,
            self.user_calendar_group_get_calendar,
            self.user_calendar_group_update_calendar,
            self.user_calendar_group_delete_calendar,
            self.user_calendar_group_calendar_list_calendar_permission,
            self.user_calendar_group_calendar_create_calendar_permission,
            self.user_calendar_group_calendar_get_calendar_permission,
            self.user_calendar_group_calendar_update_calendar_permission,
            self.user_calendar_group_calendar_delete_calendar_permission,
            self.user_calendar_group_calendar_calendar_permission_get_count,
            self.user_calendar_group_calendar_list_calendar_view,
            self.user_calendar_group_calendar_get_calendar_view,
            self.user_calendar_group_calendar_calendar_view_list_attachment,
            self.user_calendar_group_calendar_calendar_view_create_attachment,
            self.user_calendar_group_calendar_calendar_view_get_attachment,
            self.user_calendar_group_calendar_calendar_view_delete_attachment,
            self.user_calendar_group_calendar_calendar_view_attachment_get_count,
            self.user_calendar_group_calendar_calendar_view_attachment_create_upload_session,
            self.user_calendar_group_calendar_calendar_view_get_calendar,
            self.user_calendar_group_calendar_calendar_view_list_extension,
            self.user_calendar_group_calendar_calendar_view_create_extension,
            self.user_calendar_group_calendar_calendar_view_get_extension,
            self.user_calendar_group_calendar_calendar_view_update_extension,
            self.user_calendar_group_calendar_calendar_view_delete_extension,
            self.user_calendar_group_calendar_calendar_view_extension_get_count,
            self.user_calendar_group_calendar_calendar_view_list_instance,
            self.user_calendar_group_calendar_calendar_view_get_instance,
            self.user_calendar_group_calendar_calendar_view_instance_list_attachment,
            self.user_calendar_group_calendar_calendar_view_instance_create_attachment,
            self.user_calendar_group_calendar_calendar_view_instance_get_attachment,
            self.user_calendar_group_calendar_calendar_view_instance_delete_attachment,
            self.user_calendar_group_calendar_calendar_view_instance_attachment_get_count,
            self.user_calendar_group_calendar_calendar_view_instance_attachment_create_upload_session,
            self.user_calendar_group_calendar_calendar_view_instance_get_calendar,
            self.user_calendar_group_calendar_calendar_view_instance_list_extension,
            self.user_calendar_group_calendar_calendar_view_instance_create_extension,
            self.user_calendar_group_calendar_calendar_view_instance_get_extension,
            self.user_calendar_group_calendar_calendar_view_instance_update_extension,
            self.user_calendar_group_calendar_calendar_view_instance_delete_extension,
            self.user_calendar_group_calendar_calendar_view_instance_extension_get_count,
            self.user_calendar_group_calendar_calendar_view_instance_accept,
            self.user_calendar_group_calendar_calendar_view_instance_cancel,
            self.user_calendar_group_calendar_calendar_view_instance_decline,
            self.user_calendar_group_calendar_calendar_view_instance_dismiss_reminder,
            self.user_calendar_group_calendar_calendar_view_instance_forward,
            self.user_calendar_group_calendar_calendar_view_instance_permanent_delete,
            self.user_calendar_group_calendar_calendar_view_instance_snooze_reminder,
            self.user_calendar_group_calendar_calendar_view_instance_tentatively_accept,
            self.user_calendar_group_calendar_calendar_view_instance_get_count,
            self.user_calendar_group_calendar_calendar_view_instance_delta,
            self.user_calendar_group_calendar_calendar_view_accept,
            self.user_calendar_group_calendar_calendar_view_cancel,
            self.user_calendar_group_calendar_calendar_view_decline,
            self.user_calendar_group_calendar_calendar_view_dismiss_reminder,
            self.user_calendar_group_calendar_calendar_view_forward,
            self.user_calendar_group_calendar_calendar_view_permanent_delete,
            self.user_calendar_group_calendar_calendar_view_snooze_reminder,
            self.user_calendar_group_calendar_calendar_view_tentatively_accept,
            self.user_calendar_group_calendar_calendar_view_get_count,
            self.user_calendar_group_calendar_calendar_view_delta,
            self.user_calendar_group_calendar_list_event,
            self.user_calendar_group_calendar_create_event,
            self.user_calendar_group_calendar_get_event,
            self.user_calendar_group_calendar_update_event,
            self.user_calendar_group_calendar_delete_event,
            self.user_calendar_group_calendar_event_list_attachment,
            self.user_calendar_group_calendar_event_create_attachment,
            self.user_calendar_group_calendar_event_get_attachment,
            self.user_calendar_group_calendar_event_delete_attachment,
            self.user_calendar_group_calendar_event_attachment_get_count,
            self.user_calendar_group_calendar_event_attachment_create_upload_session,
            self.user_calendar_group_calendar_event_get_calendar,
            self.user_calendar_group_calendar_event_list_extension,
            self.user_calendar_group_calendar_event_create_extension,
            self.user_calendar_group_calendar_event_get_extension,
            self.user_calendar_group_calendar_event_update_extension,
            self.user_calendar_group_calendar_event_delete_extension,
            self.user_calendar_group_calendar_event_extension_get_count,
            self.user_calendar_group_calendar_event_list_instance,
            self.user_calendar_group_calendar_event_get_instance,
            self.user_calendar_group_calendar_event_instance_list_attachment,
            self.user_calendar_group_calendar_event_instance_create_attachment,
            self.user_calendar_group_calendar_event_instance_get_attachment,
            self.user_calendar_group_calendar_event_instance_delete_attachment,
            self.user_calendar_group_calendar_event_instance_attachment_get_count,
            self.user_calendar_group_calendar_event_instance_attachment_create_upload_session,
            self.user_calendar_group_calendar_event_instance_get_calendar,
            self.user_calendar_group_calendar_event_instance_list_extension,
            self.user_calendar_group_calendar_event_instance_create_extension,
            self.user_calendar_group_calendar_event_instance_get_extension,
            self.user_calendar_group_calendar_event_instance_update_extension,
            self.user_calendar_group_calendar_event_instance_delete_extension,
            self.user_calendar_group_calendar_event_instance_extension_get_count,
            self.user_calendar_group_calendar_event_instance_accept,
            self.user_calendar_group_calendar_event_instance_cancel,
            self.user_calendar_group_calendar_event_instance_decline,
            self.user_calendar_group_calendar_event_instance_dismiss_reminder,
            self.user_calendar_group_calendar_event_instance_forward,
            self.user_calendar_group_calendar_event_instance_permanent_delete,
            self.user_calendar_group_calendar_event_instance_snooze_reminder,
            self.user_calendar_group_calendar_event_instance_tentatively_accept,
            self.user_calendar_group_calendar_event_instance_get_count,
            self.user_calendar_group_calendar_event_instance_delta,
            self.user_calendar_group_calendar_event_accept,
            self.user_calendar_group_calendar_event_cancel,
            self.user_calendar_group_calendar_event_decline,
            self.user_calendar_group_calendar_event_dismiss_reminder,
            self.user_calendar_group_calendar_event_forward,
            self.user_calendar_group_calendar_event_permanent_delete,
            self.user_calendar_group_calendar_event_snooze_reminder,
            self.user_calendar_group_calendar_event_tentatively_accept,
            self.user_calendar_group_calendar_event_get_count,
            self.user_calendar_group_calendar_event_delta,
            self.user_calendar_group_calendar_allowed_calendar_sharing_role,
            self.user_calendar_group_calendar_get_schedule,
            self.user_calendar_group_calendar_permanent_delete,
            self.user_calendar_group_calendar_get_count,
            self.user_calendar_group_get_count,
            self.user_list_calendar,
            self.user_create_calendar,
            self.user_get_calendar,
            self.user_update_calendar,
            self.user_delete_calendar,
            self.user_calendar_list_calendar_permission,
            self.user_calendar_create_calendar_permission,
            self.user_calendar_get_calendar_permission,
            self.user_calendar_update_calendar_permission,
            self.user_calendar_delete_calendar_permission,
            self.user_calendar_calendar_permission_get_count,
            self.user_calendar_list_calendar_view,
            self.user_calendar_get_calendar_view,
            self.user_calendar_calendar_view_list_attachment,
            self.user_calendar_calendar_view_create_attachment,
            self.user_calendar_calendar_view_get_attachment,
            self.user_calendar_calendar_view_delete_attachment,
            self.user_calendar_calendar_view_attachment_get_count,
            self.user_calendar_calendar_view_attachment_create_upload_session,
            self.user_calendar_calendar_view_get_calendar,
            self.user_calendar_calendar_view_list_extension,
            self.user_calendar_calendar_view_create_extension,
            self.user_calendar_calendar_view_get_extension,
            self.user_calendar_calendar_view_update_extension,
            self.user_calendar_calendar_view_delete_extension,
            self.user_calendar_calendar_view_extension_get_count,
            self.user_calendar_calendar_view_list_instance,
            self.user_calendar_calendar_view_get_instance,
            self.user_calendar_calendar_view_instance_list_attachment,
            self.user_calendar_calendar_view_instance_create_attachment,
            self.user_calendar_calendar_view_instance_get_attachment,
            self.user_calendar_calendar_view_instance_delete_attachment,
            self.user_calendar_calendar_view_instance_attachment_get_count,
            self.user_calendar_calendar_view_instance_attachment_create_upload_session,
            self.user_calendar_calendar_view_instance_get_calendar,
            self.user_calendar_calendar_view_instance_list_extension,
            self.user_calendar_calendar_view_instance_create_extension,
            self.user_calendar_calendar_view_instance_get_extension,
            self.user_calendar_calendar_view_instance_update_extension,
            self.user_calendar_calendar_view_instance_delete_extension,
            self.user_calendar_calendar_view_instance_extension_get_count,
            self.user_calendar_calendar_view_instance_accept,
            self.user_calendar_calendar_view_instance_cancel,
            self.user_calendar_calendar_view_instance_decline,
            self.user_calendar_calendar_view_instance_dismiss_reminder,
            self.user_calendar_calendar_view_instance_forward,
            self.user_calendar_calendar_view_instance_permanent_delete,
            self.user_calendar_calendar_view_instance_snooze_reminder,
            self.user_calendar_calendar_view_instance_tentatively_accept,
            self.user_calendar_calendar_view_instance_get_count,
            self.user_calendar_calendar_view_instance_delta,
            self.user_calendar_calendar_view_accept,
            self.user_calendar_calendar_view_cancel,
            self.user_calendar_calendar_view_decline,
            self.user_calendar_calendar_view_dismiss_reminder,
            self.user_calendar_calendar_view_forward,
            self.user_calendar_calendar_view_permanent_delete,
            self.user_calendar_calendar_view_snooze_reminder,
            self.user_calendar_calendar_view_tentatively_accept,
            self.user_calendar_calendar_view_get_count,
            self.user_calendar_calendar_view_delta,
            self.user_calendar_list_event,
            self.user_calendar_create_event,
            self.user_calendar_get_event,
            self.user_calendar_update_event,
            self.user_calendar_delete_event,
            self.user_calendar_event_list_attachment,
            self.user_calendar_event_create_attachment,
            self.user_calendar_event_get_attachment,
            self.user_calendar_event_delete_attachment,
            self.user_calendar_event_attachment_get_count,
            self.user_calendar_event_attachment_create_upload_session,
            self.user_calendar_event_get_calendar,
            self.user_calendar_event_list_extension,
            self.user_calendar_event_create_extension,
            self.user_calendar_event_get_extension,
            self.user_calendar_event_update_extension,
            self.user_calendar_event_delete_extension,
            self.user_calendar_event_extension_get_count,
            self.user_calendar_event_list_instance,
            self.user_calendar_event_get_instance,
            self.user_calendar_event_instance_list_attachment,
            self.user_calendar_event_instance_create_attachment,
            self.user_calendar_event_instance_get_attachment,
            self.user_calendar_event_instance_delete_attachment,
            self.user_calendar_event_instance_attachment_get_count,
            self.user_calendar_event_instance_attachment_create_upload_session,
            self.user_calendar_event_instance_get_calendar,
            self.user_calendar_event_instance_list_extension,
            self.user_calendar_event_instance_create_extension,
            self.user_calendar_event_instance_get_extension,
            self.user_calendar_event_instance_update_extension,
            self.user_calendar_event_instance_delete_extension,
            self.user_calendar_event_instance_extension_get_count,
            self.user_calendar_event_instance_accept,
            self.user_calendar_event_instance_cancel,
            self.user_calendar_event_instance_decline,
            self.user_calendar_event_instance_dismiss_reminder,
            self.user_calendar_event_instance_forward,
            self.user_calendar_event_instance_permanent_delete,
            self.user_calendar_event_instance_snooze_reminder,
            self.user_calendar_event_instance_tentatively_accept,
            self.user_calendar_event_instance_get_count,
            self.user_calendar_event_instance_delta,
            self.user_calendar_event_accept,
            self.user_calendar_event_cancel,
            self.user_calendar_event_decline,
            self.user_calendar_event_dismiss_reminder,
            self.user_calendar_event_forward,
            self.user_calendar_event_permanent_delete,
            self.user_calendar_event_snooze_reminder,
            self.user_calendar_event_tentatively_accept,
            self.user_calendar_event_get_count,
            self.user_calendar_event_delta,
            self.user_calendar_allowed_calendar_sharing_role,
            self.user_calendar_get_schedule,
            self.user_calendar_permanent_delete,
            self.user_calendar_get_count,
            self.user_list_calendar_view,
            self.user_get_calendar_view,
            self.user_calendar_view_list_attachment,
            self.user_calendar_view_create_attachment,
            self.user_calendar_view_get_attachment,
            self.user_calendar_view_delete_attachment,
            self.user_calendar_view_attachment_get_count,
            self.user_calendar_view_attachment_create_upload_session,
            self.user_calendar_view_get_calendar,
            self.user_calendar_view_list_extension,
            self.user_calendar_view_create_extension,
            self.user_calendar_view_get_extension,
            self.user_calendar_view_update_extension,
            self.user_calendar_view_delete_extension,
            self.user_calendar_view_extension_get_count,
            self.user_calendar_view_list_instance,
            self.user_calendar_view_get_instance,
            self.user_calendar_view_instance_list_attachment,
            self.user_calendar_view_instance_create_attachment,
            self.user_calendar_view_instance_get_attachment,
            self.user_calendar_view_instance_delete_attachment,
            self.user_calendar_view_instance_attachment_get_count,
            self.user_calendar_view_instance_attachment_create_upload_session,
            self.user_calendar_view_instance_get_calendar,
            self.user_calendar_view_instance_list_extension,
            self.user_calendar_view_instance_create_extension,
            self.user_calendar_view_instance_get_extension,
            self.user_calendar_view_instance_update_extension,
            self.user_calendar_view_instance_delete_extension,
            self.user_calendar_view_instance_extension_get_count,
            self.user_calendar_view_instance_accept,
            self.user_calendar_view_instance_cancel,
            self.user_calendar_view_instance_decline,
            self.user_calendar_view_instance_dismiss_reminder,
            self.user_calendar_view_instance_forward,
            self.user_calendar_view_instance_permanent_delete,
            self.user_calendar_view_instance_snooze_reminder,
            self.user_calendar_view_instance_tentatively_accept,
            self.user_calendar_view_instance_get_count,
            self.user_calendar_view_instance_delta,
            self.user_calendar_view_accept,
            self.user_calendar_view_cancel,
            self.user_calendar_view_decline,
            self.user_calendar_view_dismiss_reminder,
            self.user_calendar_view_forward,
            self.user_calendar_view_permanent_delete,
            self.user_calendar_view_snooze_reminder,
            self.user_calendar_view_tentatively_accept,
            self.user_calendar_view_get_count,
            self.user_calendar_view_delta,
            self.user_list_event,
            self.user_create_event,
            self.user_get_event,
            self.user_update_event,
            self.user_delete_event,
            self.user_event_list_attachment,
            self.user_event_create_attachment,
            self.user_event_get_attachment,
            self.user_event_delete_attachment,
            self.user_event_attachment_get_count,
            self.user_event_attachment_create_upload_session,
            self.user_event_get_calendar,
            self.user_event_list_extension,
            self.user_event_create_extension,
            self.user_event_get_extension,
            self.user_event_update_extension,
            self.user_event_delete_extension,
            self.user_event_extension_get_count,
            self.user_event_list_instance,
            self.user_event_get_instance,
            self.user_event_instance_list_attachment,
            self.user_event_instance_create_attachment,
            self.user_event_instance_get_attachment,
            self.user_event_instance_delete_attachment,
            self.user_event_instance_attachment_get_count,
            self.user_event_instance_attachment_create_upload_session,
            self.user_event_instance_get_calendar,
            self.user_event_instance_list_extension,
            self.user_event_instance_create_extension,
            self.user_event_instance_get_extension,
            self.user_event_instance_update_extension,
            self.user_event_instance_delete_extension,
            self.user_event_instance_extension_get_count,
            self.user_event_instance_accept,
            self.user_event_instance_cancel,
            self.user_event_instance_decline,
            self.user_event_instance_dismiss_reminder,
            self.user_event_instance_forward,
            self.user_event_instance_permanent_delete,
            self.user_event_instance_snooze_reminder,
            self.user_event_instance_tentatively_accept,
            self.user_event_instance_get_count,
            self.user_event_instance_delta,
            self.user_event_accept,
            self.user_event_cancel,
            self.user_event_decline,
            self.user_event_dismiss_reminder,
            self.user_event_forward,
            self.user_event_permanent_delete,
            self.user_event_snooze_reminder,
            self.user_event_tentatively_accept,
            self.user_event_get_count,
            self.user_event_delta,
        ]
